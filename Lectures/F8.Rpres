
<style type="text/css">

.indent {
  padding-left: 2em !important;
}

.emphasize {
  text-align: center;
  width: 100%;
  color: red;
  font-weight:bold;
  line-height:400%;
}

.sep {
  line-height:400%;
}

.large {
  font-size: 1.2em !important;
  line-height: 64px !important;
}

.reveal section del {
  color: red;
  font-weight:bold;
  width: 100%;
}

</style>

Programmering i R
========================================================
transition: rotate
## Föreläsning 8: ggplot2 och spatiala data
### [Josef Wilzén](mailto:josef.wilzen@liu.se)

Avdelningen för statistik,
Linköpings universitet

Dagens föreläsning:
========================================================
- inför tentamen
- Texthantering
- Modern databearbetning med dplyr, tidyr och piping

Interaktiv återkoppling
========================================================
incremental: true

Inför tentamen
========================================================
- Tenta i datorsal 08.00-12.00
- Tentan kommer likna de gamla tentorna, som ni hittar [[här]](https://github.com/STIMALiU/KursRprgm/tree/master/OldExams), det finns lösningar till dessa
- Hjälpmedel: 
  - Den inbyggda hjälpen i R (ej internet)
  - Samtliga "fusklappar" som finns på Github
      
Inför tentamen
========================================================
- Tenta, "fusklappar" och eventualla dataset kommer ni att få tillgång till elektroniskt (ta inte med några papper)
- Vid tentan kommer ni få ett specifikt användarnamn och lösenord som ni använder för att logga in.
- OBS: använd `ej` vanliga liuid och lösenord!
- Tentan är anonym
- Se [här](https://github.com/STIMALiU/ComputerLabs/raw/master/ComputerExams/DocStudent.pdf) för allmänna instruktioner för datortentor i PC-pularna. 



Texthantering i R
========================================================
type: section

Arbeta med strängar
========================================================
- Sträng (eng. string): en samling bokstäver (characters)
- Centralt är regular expressions (regex)
- Identifiera/matcha text eller delar av text (tänk sökfunktion)
- regex går även att använda i sökfunktionen i R-Studio (och andra program)
- Med ```pattern``` syftas regular expressions i R

Arbeta med strängar II
========================================================
- I R finns ett antal förinstallerade funktioner (i paketet base) för att hantera text 
  - ex. `paste()`, `substr()`, `nchar()`
- Men vi använder framförallt paketet ```stringr```
- ```stringr``` är en s.k. “wrapper” för de förinstallerade funktionerna



Arbeta med strängar II
========================================================

- ```readLines(con=,encoding=)``` kan användas för att läsa in en text. Varje rad i texten blir då ett element i en vektor. 

- Icke-engelska symboler/tecken text kräver [encoding](http://en.wikipedia.org/wiki/Character_encoding) (ex. för å,ä och ö). 
- Vi ändrar med  ```encoding = "latin1"``` i ```readLines()```.
- Vanligast är `latin1` och `UTF8`

Paketet stringr
========================================================
- En vektoriserad wrapper för de förinstallerade funktionerna 
-  Samtliga funktioner börjar med ```str_```
- Se [[artikeln]](http://journal.r-project.org/archive/2010-2/RJournal_2010-2_Wickham.pdf) för detaljer om stringr

Funktioner
========================================================
type: sub-section

Grundläggande strängfunktioner
========================================================

stringr | base | Användning
--- | ----- | ---- | 
`str_sub()` | `substr()` | substring,  välja ut en del av en sträng
`str_c()` | `paste()` | slår ihop strängelement
`str_split()` |`strsplit()` | dela upp en sträng i flera element
`str_length()` | `nchar()` | beräknar antalet tecken
`str_trim()` | - | tar bort mellanslag (före/efter textelement)
`str_pad()` | - | lägger till mellanslag (före/efter textelement)

Pattern matching
========================================================
type: sub-section

regular expression (regexp)
========================================================
- Hitta specifika delar av en sträng som uppfyller ett villkor
- Byggs upp av:
  - literals: "vanliga bokstäver och siffror"
  - metacharacters: (metatecken) sätter upp speciella regler för matchning
- Se RP:s [[video]](http://www.youtube.com/user/rdpeng/videos?view=0&flow=grid):
  - Regular Expressions
  - Introduction to the Baltimore Homicide Data
  - Regular Expressions in R

regular expression: metacharacters
========================================================
Tecken| Betydelse
----- | ---- | 
. | samtliga tecken (exkl. det “tomma” tecknet “”)  
^ | det "tomma" tecknet i början av en text
$ | det "tomma" tecknet i slutet text
* | föregående tecken 0 eller fler gånger
+ | föregående tecken 1 eller fler gånger
? | föregående tecken är valfritt
{n,m} | föregående tecken $n$ eller max $m$
[] | teckenlista (character list)
$|$ | ELLER
() | Gruppering
\ | Används för att identifiera metatecken/specialtecken

regular expression: teckenklass
========================================================
- Med [ ] skapas en lista över tänkbara tecken, en s.k. teckenklass (eng. character class)
- Används för att identifiera en mängd av tecken
- Inom [ ] har bara följande meta-tecken en särskild betydelse:

Tecken| Betydelse| Exempel
----- | ---- | ----|
- | tecken | A-Z a-z 0-9 
^ | ICKE | ^ 0-9 
\ | specialtecken | \t\n

regular expression: teckenklass
========================================================
Vanliga fördefinierade klasser är... (kolla ```?regexp```)
- [:digit:]  Nummer
- [:lower:]  gemener
- [:upper:]  VERSALER
- [:punct:]  tecken, ej bokstäver eller siffror 
- [:space:]  mellanslag, tab, ny rad m.m.

regular expression: länkar
========================================================
- Sida för att testa regular expression: [regexpal.com](http://regexpal.com)
- Från [wikipedia](http://sv.wikipedia.org/wiki/Regulj%C3%A4ra_uttryck)


Pattern matchingfunktioner i R 
========================================================

- ```pattern``` är ett regular expression

stringr | base | Användning
--- | ----- | ---- | 
`str_detect()` | `grepl()` | identifierar pattern, returnerar en logisk vektor
`str_locate()` | `gregexpr()` | identifierar pattern, returnerar positionen i texten
`str_replace()` | `gsub()` | identifierar pattern, och ersätter detta med ny text
`str_extract_all` | - | Plocka ut alla strängar som uppfyller `pattern`


- För exempel på några av dessa funktioner kolla på Roger Pengs [[video]](http://www.youtube.com/watch?v=q8SzNKib5-4)


regular expression: exempel
========================================================

```{r}
library(stringr)
a <- c("hej","hela","vatten")
str_detect(pattern="he", string = a)
str_detect(pattern="a", string = a)
str_locate(pattern="he", string = a)
str_extract_all(pattern = ".a", string = a)
```



Modern databearbetning 
========================================================
type: section

Varför tala om detta?
========================================================
- Datamängder blir bara större och större
- Smart hantering minskar arbetsbördan
- Smart hantering gör bearbetning snabb
- Skriv kod för människor med pipes


piping
========================================================

z <- a %>% 
  fun1(b) %>% 
  fun3()

är detsamma som

y <- fun(a, b) 
z <- fun3(x)


tidy data
========================================================

messy data -> tidy data -> analys


tidyr
========================================================

- Paket i R för att konvertera 'messy data' till 'tidy' data
- Effektivt programmerat
  - Minnesmässigt
  - Beräkningsmässigt
- Kommer bespara er mycket tid

tidyr exempel
========================================================




dplyr
========================================================

- Paket i R för att hantera stora datamängder
- En liten uppsättning s.k. verb för datahantering
- Optimerad C++ kod för snabb och minneseffektiv hantering
- Går att koppla till databaser och Spark


dplyr verb
========================================================

Tabell över verb


dplyr exempel
========================================================

Exempel på dplyr


