<style type="text/css">

.indent {
  padding-left: 2em !important;
}

.emphasize {
  text-align: center; 
  width: 100%; 
  color: red; 
  font-weight:bold;
  line-height:400%;
}

.sep {
  line-height:400%;
}

.large {
  font-size: 1.2em !important;
  line-height: 64px !important;
}

.reveal section del {
  color: red;
  font-weight:bold;
  width: 100%;
}

</style>

Programering i R
========================================================
transition: rotate
## Föreläsning 4: Funktioner och programmering
### [Måns Magnusson](mailto:mans.magnusson@liu.se)
Avdelningen för statistik, 
Linköpings universitet

Föreläsning 4: Innehåll 
========================================================
- Uppföljning av labb 3
- Allmänt om funktioner
- Globala och lokala miljöer i R
- Bra och effektiv programmering
- ```*apply```-funktioner

Uppföljning av laboration 3
========================================================
type: section

Mer om funktioner
========================================================
type: section


Kort repetition
========================================================
incremental: true
En funktion i R består av:
- ett funktionsnamn (ex. ```f```)
- en funktionsdefinition - ```function()```
- 0 eller flera argument / invärden (ex. ```x``` och ```y```)
- "curly bracers" ```{}```
- programkod / funktionen (ex. ```x + y```)
- returnera värde (ex. ```return()```)
- utvärdet från funktionen (ex. ```f(3,2)``` = **5** )

- en egen (lokal) miljö där beräkningar görs

Allmänt om funktioner
========================================================
- Funktioner är precis som andra objekt i R (skriva ut till prompt, spara, manipulera m.m.)

```{r}
f <- function(x,y) {
  return(x^2 - y)
}
f
```


Allmänt om funktioner (forts.)
========================================================
- Funktioner kan tas som argument (av andra funktioner)
```{r}
SquareFunction <- function(x) {
  return(x^2)
}
integrate(SquareFunction, lower = 0, upper = 1)
```

- Funktioner kan returnera funktioner (se ex. i RP:s video)

Allmänt om funktioner (forts. II)
========================================================
incremental: true
- Vi behöver inte namnge argumenten vid anrop av funktioner.
```{r}
f(1,5) # Samma som f(x = 1, y = 5)
```

- Vi kan ha vilken ordning vi vill på argumenten om de namnges
```{r}
f(y = 5, x = 1) # Samma som f(x = 1, y = 5)
```


Allmänt om funktioner (forts. III)
========================================================
- Behöver inte ```return()``` eller ```{ }``` för små funktioner
```{r}
f <- function(x) x^2 - 3
f(3)
```

Allmänt om funktioner (forts. IV)
========================================================
- Defaultvärden kan anges för argument
```{r}
f <- function(x = 10) x^2 - 3
f(3)
f()
```

Demo 08a: Allmänt om funktioner
========================================================
- Mer om funktioner

Fil för demonstration finns [[här]](https://raw.github.com/MansMeg/KursRprgm/master/Demonstrations/demo_08a.R)


Globala och lokala miljöer i R
========================================================
type: sub-section


Globala miljöer, lokala miljöer och namespaces
========================================================
incremental: true

R består av ett antal miljöer där objekt kan definieras/skapas

- Den global miljön 
- Lokala miljöer (inne i funktioner)
- Namespaces


Hur vet R vad vi menar?
========================================================
incremental: true
- Hur kopplar R ihop en symbol med ett objekt? (ex. ```mean``` med funktionen ```mean```)
- R har en söklista som gås igenom:
  1. Lokala miljöer (söker vidare "uppåt" till)
  2. Den global miljön (Global enviroment)
  3. Vidare i den ordning ```namespaces``` är laddade

Fria variabler
========================================================
incremental: true
- I funktioner kan vi definiera vad som kallas "fria" variabler

```{r,eval=FALSE}
f <- function(x) x + y
```

> Objektet/värdet för "fria" variabler undersöks i den miljö funktionen var definierad/skapad.

- Sedan söker R på samma sätt som i förra sliden

Exempel på fria variabler
========================================================
```{r,eval=FALSE}
f <- function(x) x + y
f(3)
```

```{r,eval=TRUE,echo=FALSE}
f <- function(x) {
  cat("Error in f(3) : object 'y' not found")}
f(3)
f <- function(x) x + y
```

```{r,eval=TRUE}
y <- 2
f(3)
```

Hur vet R vad vi menar? II
========================================================
incremental: true
- Se R:s söklista: ```search()```
- Se var en funktion skapats: ```enviroment()```
- Anropa en funktion i en given namespace/miljö: ```::```

Exempel på search()
========================================================
Vi kan undersöka vilka laddade namespaces som finns med ```search()```:
```{r}
search()
```

Exempel på :: och environment()
========================================================
```{r}
f<-function(x) x^2
environment(f)
environment(base::mean)
```

Lite mer om att skapa objekt
========================================================
incremental: true

Att skapa / definiera objekt kallas att tilldela (assign)

- grunden är ```assign()```
- ```<-``` : tilldela i aktuell miljö 
- ```<<-``` : tilldela direkt till global 
- ```=``` : Kan användas, men avråds från (minska förvirring i funktioner)


Funktioner i funktioner
========================================================
- Ofta vill vi använda funktioner i funktioner
- Att tänka på:
  - Var ska funktionen definieras/skapas? - om vi har fria variabler 
  - Skicka information inom funktioner


Skicka information inom funktioner
========================================================
- Kan göras genon att "skicka vidare" argument hela vägen
- Detta görs med "ellipsis" - symbolen ```...```
- Detta läggs in som ett argument i funktionen, ex. ```minFun <- function(...)```
- Sedan används ```...``` där dessa godtyckliga argument ska

```{r}
minMean <- function(...){ 
  print(mean(...))
}
minMean(c(1,3,NA,5), na.rm = TRUE)
```


Demo 08b: Miljöer och namespaces
========================================================
- Miljöer
- Fria variabler
- Tilldelning (assign)
- Ellipsis (...)

Fil för demonstration finns [[här]](https://raw.github.com/MansMeg/KursRprgm/master/Demonstrations/demo_08b.R)


God (vetenskaplig) programmering
========================================================
type: section
Bygger på artikeln *Best practices for scientific computing* som finns [här](http://arxiv.org/abs/1210.0530)

God (vetenskaplig) programmering
========================================================
- Kod är lika stor del av vetenskap/analys som allt annat
- Forskare spenderar 30% eller mer på att skriva kod, skickliga statistiker gör troligen samma sak.
- Det är enkelt att det blir fel

8 steg för god programmering
========================================================
1. Skriv kod för människor, inte datorer
2. Låt datorn göra arbetet
3. Arbeta i små steg
4. Upprepa aldrig din (eller andras) kod (DRY - principle)
5. Planera för misstag
6. Optimera kod först när den fungerar korrekt
7. Dokumentera 
8. Samarbeta


1. Skriv kod för människor, inte datorer
========================================================
incremental: true
- Läsare ska inte behöva hålla allt i huvudet, använd funktioner
- Använd variabelnamn som är tydliga, konsistenta och meningsfulla
- Använd en kodstil (coding style):
  - Ex. [Hadley Wickhams](http://adv-r.had.co.nz/Style.html), [Googles](http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml)

2. Låt datorn göra arbetet
========================================================
incremental: true
- Låt datorn upprepa uppgifter 
- Återanvänd kod (funktioner är smidigt)
- Automatisera arbetsflödet (one file to rule them all)

3. Arbeta i små steg
========================================================
incremental: true
- Skriv kod i små steg, testa och ändra löpande
- Versionshantera din kod (överkurs)
  - Git finns implementerat direkt i R-Studio [mer info](http://www.molecularecologist.com/2013/11/using-github-with-r-and-rstudio/)
- Versionshantera ALLT som inte skapas av koden (överkurs)
  - Data, rapporter, (kurser i R programmering)

4. Upprepa aldrig din (eller andras) kod (DRY - principle)
========================================================
incremental: true
- All data ska bara finnas på ett ställe (ex. konstanter)
- Skapa funktioner istället för att copy-paste
- Återvinn (din och andras) kod istället för att skriva egen - **R-paket!**

5. Planera för misstag
========================================================
incremental: true
- Skapa kontroller av input och output: ```stop()```
- Använd testpaket (överkurs)
  - i R: paketet ```testthat```
- Gör buggar till egna testfall
- Använd debuggers (överkurs)

6. Optimera kod först när den fungerar korrekt
========================================================
incremental: true
- Använd profilers (överkurs)
  - i R: ```Rprof()```
- Använd högnivåspråk, (använd R =) )

7. Dokumentera
========================================================
incremental: true
- Dokumentera syftet med koden, **inte** vad koden gör
- Gör koden enkel att förstå istället för att dokumentera komplex kod
- Kombinera kod och dokumentation
  - Lägg in mycket inlinedokumentation med ```#```
  - literate programming/knitr (överkurs)
  - Paketet ```ROxygen``` (överkurs)

8. Samarbeta
========================================================
incremental: true
- Låt andra titta på/kolla din kod
- Använd parprogrammering för att:
  - hjälpa kollegor in i projekt
  - hantera komplexa programmeringsproblem
- Använd issue-trackers (överkurs)


*apply-functioner
========================================================
type: section

*apply-functioner
========================================================
- "High level functions"
- Ett (snabbare) alternativ till loopar
- Internt i R: loop i C-kod
- Funtioner:
  - ```lapply()``` : loopar över element i en lista
  - ```tapply()``` : loopar över ett index (ex. ```aggregate()```)
  - ```apply()```  : loopar över marginaler (ex. ```colSums()```)
  - det finns fler... se [här](http://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/)

Exempel på lapply()
========================================================
```lapply()``` har tre argument:
- ```X``` listan vi vill loopa över
- ```FUN``` funktionen att aplicera
- ```...``` argument till funktionen
```{r}
myList <- list(x = 1:10, y = c(NA,12:20))
str(lapply(X=myList, FUN=mean, na.rm=TRUE))
```

Mäta körtid i R
========================================================
- Ibland vill vi mäta hur lång tid kod tar att köra: ```system.time()```
```{r}
system.time(expr=mean(rep(c(1,2),1000000)))
```

Demo 08c: *apply och körtid
====================================
## Demonstration av:
- ```*apply``` 
- körtid i R 

Fil för demonstration finns [[här]](https://raw.github.com/MansMeg/KursRprgm/master/Demonstrations/demo_08c.R)

