<style type="text/css">

.indent {
  padding-left: 2em !important;
}

.emphasize {
  text-align: center; 
  width: 100%; 
  color: red; 
  font-weight:bold;
  line-height:400%;
}

.sep {
  line-height:400%;
}

.large {
  font-size: 1.2em !important;
  line-height: 64px !important;
}

.reveal section del {
  color: red;
  font-weight:bold;
  width: 100%;
}

</style>

Programering i R
========================================================
transition: rotate
## Föreläsning 3: Programkontroll
### [Måns Magnusson](mailto:mans.magnusson@liu.se)
Avdelningen för statistik, 
Linköpings universitet

Föreläsning 3: Innehåll 
========================================================
- Uppföljning av labb D1 och D2
- Programkontroll
- Villkorssatser
- Loopar (for - loop)
  - Kontroll av loopar break, next
- Villkorsstyrda loopar (while - loop)
- Funktionsmeddelanden
  message, warning, stop


Programkontroll
========================================================
type: section

Programkontroll
========================================================
incremental: true

- Att kontrollera körning av program / funktioner
- Det finns olika kontroller vi kan vilja göra, exempelvis:
  - köra / (åter)använda en annan del av koden
  - villkorsstyra kod 
  - köra kod 0 eller fler gånger
  - köra kod till dess ett villkor är uppfyllt
  - avbryta ett program

Villkorssatser
========================================================
type: section

Villkorssatser - Syntax
========================================================
incremental: true

```{r, eval=FALSE}
if ( Villkor ) { Kod om Villkor == TRUE }
```
- Om Villkor är en logisk vektor prövas bara det **första** elementet
```{r, eval=FALSE}
if ( Villkor ) {
  Kod om Villkor == TRUE 
} else {
  Kod om Villkor == FALSE 
}
```

Villkorssatser - Syntax forts.
========================================================
```{r, eval=FALSE}
if ( Villkor 1 ) { 
  Kod om Villkor 1 == TRUE 
} else if ( Villkor 2 ){
  Kod om Villkor 2 == TRUE 
} else {
  Kod om Villkor 1 och 2 == FALSE 
}
```

Villkorssatser - Syntax forts.
========================================================
- Om det är många ```else if``` kan ```switch``` vara smidigare:

```{r, eval=TRUE}
elak_dator <- "skynet" 
switch(elak_dator, 
  # Kod om elak_dator = "hal"
  hal = { print(2001) },     
  # Kod om elak_dator = "skynet"
  skynet = {
    # Det går att skriva flera rader
    print(1997)},
  # Om inget alternativ ovan
  { print(2000) }
)
```



Villkorssatser - Exempel
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
prgm <- "R"
if ( prgm == "R" ) { cat("Kul!") }
```
```{r, eval=TRUE}
prgm <- "Excel"
if ( prgm == "R" ) { cat("Kul!") }
```


Villkorssatser - Exempel II
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
prgm <- "Excel"
if ( prgm == "R" ) { 
  print("Kul!")
} else if ( prgm == "Python"){
  print("Okej då!")
} else {
  print("Ehhh...")
}
```


Demo: Villkorssatser
========================================================
- Villkorssatser
- Villkorssatser i funktioner


Loopar
========================================================
type: section

for - loop
========================================================
type: sub-section

Vad är en for - loop
========================================================
- Kontrollerar upprepningar av (samma) kod
- I R används ```for``` som loopar över en vektor
```{r, eval=FALSE}
for ( elem in vektor ) { 
  # Kod som anropas en gång per element
  # elem är ett element i vektorn  
}
```
- Vilken vektor eller lista som helst kan användas

Loopar (for - loop): Exempel
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
vektor <- c("Oleg", "Lo", "Lotta")
for ( element in vektor ) { 
  print(element) 
}
```


Loopar (for - loop): Exempel II
========================================================
type: prompt
incremental: true
Vi kan loopa på flera sätt:
```{r, eval=FALSE}
for ( element in vektor ) { 
  print(element) 
}
```
```{r, eval=FALSE}
for ( index in seq_along(vektor) ) { 
  print(vektor[index]) 
}
```
```{r, eval=FALSE}
for ( index in 1:length(vektor) ) {
  print(vektor[index])
}
```

Demo: for-loopar
========================================================
type: sub-section

Nästlade loopar (nested loops)
========================================================
- Om vi vill loopa i flera dimensioner
- Delas upp i "Inre" och "yttre" loop

```{r, eval=TRUE}
A <- matrix(1:4, nrow = 2)
for ( i in 1:2 ) {
  for ( j in 1:2 ) {
    print(A[i,j])
  }
}
```

Demo: nästlade for-loopar
========================================================
type: sub-section

Kontrollstrukturer för loopar
========================================================
type: sub-section

Kontrollstrukturer för loopar
========================================================
- Vi vill ofta kontrollera hur looparna arbetar
- För detta finns följande kontrollstrukturer:

| Kontrollstruktur i R | Effekt |
| --- | --- |
| ```next()``` | Börjar om loopen direkt. | 
| ```break()``` | Avbryter den aktuella/innersta loopen. | 
| ```stop()``` | Avbryter allt och genererar ett felmeddelande (Fungerar även i funktioner) | 

Exempel: next()
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
for ( i in 1:10 ) {
  if(i %% 2 == 0) { next() }
  print(i)
}
```

Exempel: break()
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
for ( i in 1:3 ) {
  for ( letter in c("a","b","c") ) {
    if(letter == "b") { break() }
    print(letter)
  }
}
```

Exempel: stop()
========================================================
type: prompt
incremental: true
```{r, eval=FALSE}
for ( i in 1:3 ) {
  for ( letter in c("a","b","c") ) {
    if(letter == "b") { stop("Mitt fel!") }
    print(letter)
  }
}
```
```{r, eval=TRUE, echo=FALSE}
"a"
cat("Error: Mitt fel!")
```

Demo: kontrollstrukturer för loopar
========================================================
type: sub-section

Villkorstyrda loopar (while - loop)
========================================================
type: sub-section

Villkorstyrda loopar (while - loop)
========================================================
- Om vi inte vet antalet iterationer
```{r, eval=FALSE}
while ( Villkor ) { 
  # Kod som anropas så länge Villkor == TRUE
}
```
- **Varning!** Kan fortsätta hur länge som hellst
- **Obs!** ```Villkor``` måste kunna utvärderas innan loopen startar
- ```repeat()``` repeterar kod till ```break```

Villkorstyrda loopar: Exempel
========================================================
type: prompt
incremental: true
```{r, eval=TRUE}
i <- 1 # Obs!
while ( i < 5 ) { 
  print(i)
  i <- i + 1
}
```

Varningsmeddelanden
========================================================
type: section

Varningsmeddelanden
========================================================
- ```stop()``` avbryter funktioner/loopar och meddelar ett fel
- Skapa en varning, som inte avbryter: ```warning()```
- Varningar sparas och skrivs ut sist

```{r,eval=FALSE}
for (i in 1:2){
  print(i)
  warning(paste("Farligt värre", i))
}

```
```{r,eval=TRUE,echo=FALSE}
cat("[1] 1\n[1] 2\nWarning messages:\n1: Farligt värre 1 \n2: Farligt värre 2 ")
```


Demo: villkorsstyrda loopar
========================================================
type: sub-section
