
<style type="text/css">

.indent {
  padding-left: 2em !important;
}

.emphasize {
  text-align: center;
  width: 100%;
  color: red;
  font-weight:bold;
  line-height:400%;
}

.sep {
  line-height:400%;
}

.large {
  font-size: 1.2em !important;
  line-height: 64px !important;
}

.reveal section del {
  color: red;
  font-weight:bold;
  width: 100%;
}

</style>

Programmering i R
========================================================
transition: rotate
## Föreläsning 7: Texthantering, statistik, simulering och regression
### [Måns Magnusson](mailto:mans.magnusson@liu.se)

Avdelningen för statistik,
Linköpings universitet

Föreläsning 7: Innehåll 
========================================================
- Uppföljning tidigare laborationer
- Texthantering och stringr, regular expression 
- Statistik och simulering
- Linjär regression

Laboration D5
========================================================
incremental: true

- Samtliga kompletteringar är rättade

Laboration D6
========================================================

## goo.gl/z3IvEr

Texthantering i R
========================================================
type: section

Arbeta med strängar
========================================================
- Sträng (eng. string): en samling bokstäver (characters)
- Centralt är regular expressions (regex)
- Identifiera/matcha text eller delar av text (tänk sökfunktion)
- regex går även att använda i sökfunktionen i R-Studio (och andra program)
- Med ```pattern``` syftas regular expressions i R

Arbeta med strängar II
========================================================
- I R finns ett antal förinstallerade funktioner (i paketet base) för att hantera text 
  - ex. `paste()`, `substr()`, `nchar()`
- Men vi använder framförallt paketet ```stringr```
- ```stringr``` är en s.k. “wrapper” för de förinstallerade funktionerna



Arbeta med strängar II
========================================================

- ```readLines(con=,encoding=)``` kan användas för att läsa in en text. Varje rad i texten blir då ett element i en vektor. 

- Icke-engelska symboler/tecken text kräver [encoding](http://en.wikipedia.org/wiki/Character_encoding) (ex. för å,ä och ö). 
- Vi ändrar med  ```encoding = "latin1"``` i ```readLines()```.
- Vanligast är `latin1` och `UTF8`

Paketet stringr
========================================================
- En vektoriserad wrapper för de förinstallerade funktionerna 
-  Samtliga funktioner börjar med ```str_```
- Se [[artikeln]](http://journal.r-project.org/archive/2010-2/RJournal_2010-2_Wickham.pdf) för detaljer om stringr

Funktioner
========================================================
type: sub-section

Grundläggande strängfunktioner
========================================================

stringr | base | Användning
--- | ----- | ---- | 
`str_sub()` | `substr()` | substring,  välja ut en del av en sträng
`str_c()` | `paste()` | slår ihop strängelement
`str_split()` |`strsplit()` | dela upp en sträng i flera element
`str_length()` | `nchar()` | beräknar antalet tecken
`str_trim()` | - | tar bort mellanslag (före/efter textelement)
`str_pad()` | - | lägger till mellanslag (före/efter textelement)

Pattern matching
========================================================
type: sub-section

regular expression (regexp)
========================================================
- Hitta specifika delar av en sträng som uppfyller ett villkor
- Byggs upp av:
  - literals: "vanliga bokstäver och siffror"
  - metacharacters: (metatecken) sätter upp speciella regler för matchning
- Se RP:s [[video]](http://www.youtube.com/user/rdpeng/videos?view=0&flow=grid):
  - Regular Expressions
  - Introduction to the Baltimore Homicide Data
  - Regular Expressions in R

regular expression: metacharacters
========================================================
Tecken| Betydelse
----- | ---- | 
. | samtliga tecken (exkl. det “tomma” tecknet “”)  
^ | det "tomma" tecknet i början av en text
$ | det "tomma" tecknet i slutet text
* | föregående tecken 0 eller fler gånger
+ | föregående tecken 1 eller fler gånger
? | föregående tecken är valfritt
{n,m} | föregående tecken $n$ eller max $m$
[] | teckenlista (character list)
$|$ | ELLER
() | Gruppering
\ | Används för att identifiera metatecken/specialtecken

regular expression: teckenklass
========================================================
- Med [ ] skapas en lista över tänkbara tecken, en s.k. teckenklass (eng. character class)
- Används för att identifiera en mängd av tecken
- Inom [ ] har bara följande meta-tecken en särskild betydelse:

Tecken| Betydelse| Exempel
----- | ---- | ----|
- | tecken | A-Z a-z 0-9 
^ | ICKE | ^ 0-9 
\ | specialtecken | \t\n

regular expression: teckenklass
========================================================
Vanliga fördefinierade klasser är... (kolla ```?regexp```)
- [:digit:]  Nummer
- [:lower:]  gemener
- [:upper:]  VERSALER
- [:punct:]  tecken, ej bokstäver eller siffror 
- [:space:]  mellanslag, tab, ny rad m.m.

regular expression: länkar
========================================================
- Sida för att testa regular expression: [regexpal.com](http://regexpal.com)
- Från [wikipedia](http://sv.wikipedia.org/wiki/Regulj%C3%A4ra_uttryck)


Pattern matchingfunktioner i R 
========================================================

- ```pattern``` är ett regular expression

stringr | base | Användning
--- | ----- | ---- | 
`str_detect()` | `grepl()` | identifierar pattern, returnerar en logisk vektor
`str_locate()` | `gregexpr()` | identifierar pattern, returnerar positionen i texten
`str_replace()` | `gsub()` | identifierar pattern, och ersätter detta med ny text
`str_extract_all` | - | Plocka ut alla strängar som uppfyller `pattern`


- För exempel på några av dessa funktioner kolla på Roger Pengs [[video]](http://www.youtube.com/watch?v=q8SzNKib5-4)


regular expression: exempel
========================================================

```{r}
library(stringr)
a <- c("hej","hela","vatten")
str_detect(pattern="he", string = a)
str_detect(pattern="a", string = a)
str_locate(pattern="he", string = a)
str_extract_all(pattern = ".a", string = a)
```



Statistik och simulering
========================================================
type: section

Enklare statistiska tester
========================================================

- ${\chi}^2$-tester görs på (**Obs!**) _tabeller_ med: 
  - ```chisq.test()```, ```fisher.test()```
- För t-tester används ```t.test()```
- Korrelation och kovarians beräknas med: 
  - ```cor()``` och ```cov()``` och testas med
  - ```cor.test()```


Slumptal och simulering
========================================================

- I R finns en uppsättning funktioner för fördelningar

prefix | Beskrivning | Exempel
----- | ---- | ----- 
```r``` | simulera från fördelningen | ```rnorm()```
```d``` | täthetsfunktionen (pdf) | ```dnorm()```
```p``` | kulmulativ fördelninsgfunktion (cdf) | ```pnorm()```
```q``` | inversa kulmulativa fördelningsfunktionen | ```qnorm()```

- Se CRAN task view: Distributions [[här]](http://cran.r-project.org/web/views/Distributions.html)

Slumptal och simulering: Urval och slumpfrön
========================================================
- Det finns ingen riktig slump i datorer
- Det finns slumptalsgeneratorer
- Kan styra "slumpen" med "slumpfrön" (```set.seed()```)
- För att dra ett (obundet) slumpmässigt urval använder vi ```sample()```

Slumptal och simulering: Exempel
========================================================
incremental: true

```{r}
rnorm(n=5, mean=10, sd=1)
set.seed(20140730)
rnorm(n=5, mean=10, sd=1)
set.seed(20140730)
rnorm(n=5, mean=10, sd=1)
```


Slumptal och simulering: Exempel sample()
========================================================
incremental: true

```{r}
text <- c("Linköpings", "Universitet")
set.seed(20140730)
sample(x=text, size=4, replace=TRUE)
sample(x=text, size=4, replace=TRUE)
set.seed(20140730)
sample(x=text, size=4, replace=TRUE)
```

Linjär regression
========================================================
type: section

Linjär regression
========================================================
incremental: true

- R skiljer sig från andra statistikprogram
- Objektorienteringen i R
- Grunden är formelobjektet ```y ~ x1 + x2```
  Används på flera håll i R.
- Att arbeta med modeller i R innebär fyra delar/steg:
  1. Anpassa/träna vår modell och spara som ett objekt
  2. Analysera/studera resultatet
  3. Diagnostisera
  4. Använda modellen och resultaten


Anpassa en modell: formula
========================================================
incremental: true

- Kräver formel och data (med samma variabeler)

```{r}
library(MASS)
library(car)
data(Prestige)
```
```{r}
mod1 <- lm(prestige ~ income + women + education, data=Prestige)
```
```{r}
mod2 <- lm(prestige ~ income + women + education - 1, data=Prestige)
```
```{r}
mod3 <- lm(prestige ~ income:women + education, data=Prestige)
```


Analysera resultatet
========================================================

- Använder följande funktioner för att studera resultatet:
  - ```summary()```
  - ```anova()```

Exempel:
```{r, eval=FALSE}
summary(mod1)
anova(mod1)
anova(mod3, mod1, test="Chisq")
```


Diagnosticera modellen
========================================================

- Finns ett stort antal metoder för detta, ex:

```{r, eval=FALSE}
plot(mod1)
durbinWatsonTest(mod1)
qqPlot(mod1)  
```


Använda modellen
========================================================

- Vi kan göra olika saker med en färdig modell som
  - Publicera resultat
  - Studera residualer
  - Prediktion
  - Generera "fina" tabeller
- Vi kan spara vår modell och sedan använda funktioner som
  - ```resid()```
  - ```predict()```


