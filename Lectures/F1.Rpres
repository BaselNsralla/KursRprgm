<style type="text/css">

.indent {
  padding-left: 2em !important;
}

.emphasize {
  text-align: center; 
  width: 100%; 
  color: red; 
  font-weight:bold;
  line-height:400%;
}

.sep {
  line-height:400%;
}

.large {
  font-size: 1.2em !important;
  line-height: 64px !important;
}

.reveal section del {
  color: red;
  font-weight:bold;
  width: 100%;
}

</style>

Programering i R
========================================================
transition: rotate
## Föreläsning 1: Introduktion
### [Måns Magnusson](mailto:mans.magnusson@liu.se)
Avdelningen för statistik, 
Linköpings universitet


Föreläsning 1: Innehåll 
========================================================
- Kursens upplägg och praktisk information
- R, R-Studio och vetenskaplig programmering
- Vad är R och R-Studio?
- Introduktion till programering i R
  - R som miniräknare 
  - Variabler
  - Numeriska vektorer
- Logik
- Att söka hjälp 
- Inför datalaborationer


Kursens upplägg och praktisk information
========================================================
type: section


Kursens mål
========================================================
incremental: true

Information om kursen finns i **[[kursplanen]](http://kdb-5.liu.se/liu/fil/kp_detail_print_sv.lasso?&ID=2017074)**. Denna kan sammanfattas till:

- Mål 0. Bli bekväma med datorer
- Mål 1. Tänka som en programmerare. Ställa upp problemet rätt. Struktur.
- Mål 2. Skriva en (mindre) programkod.
- Mål 3. Bli bekväma med R. Förstå hur du kan använda R i ditt framtida statistiska arbete.
- Mål 4. Ha kul!


Kursens delar
========================================================
incremental: true
### Kursen består av två delar:
- *Del 1:* Grundläggande programering
- *Del 2:* Tillämpningar
  
### Varje vecka (block):

- En föreläsning (med uppföljning av förra labben)
- En ~~obligatorisk~~ datorlaboration 
- 6 timmar lärarledd laboration + **många timmar eget arbete**
- Inlämning **varje onsdag kl. 18.00** via LISAM

Del 1: Grundläggande programering
========================================================
incremental: false

- Grunderna för programmering i R
- Fyra föreläsningar
- Fyra labbar
- Labbarna görs **en och en**

Del 2: Analys, datumhantering, strängar/regexp, paket och grafik
========================================================
incremental: false

- Statistisk analys med R
- Fyra föreläsningar
- Fyra labbar
- Labbarna görs genom **parprogrammering**
- **Miniprojekt** i två delar


Kursens viktigaste moment: 
========================================================

![alt text](images/Bart.gif)

~~Eget arbete med labbarna!~~

Praktisk information
========================================================

## Kursens hemsida 
Hemsidan innehåller bland annat schema, föreläsningar m.m. och finns [[här]](http://www.ida.liu.se/~732G33/).  

Kursen har också en github-sida [[här]](https://github.com/MansMeg/KursRprgm/)

## Kurskod: 
**732G33**

## Programvara
För denna kurs krävs [R](http://www.r-project.org/) och [R-Studio](http://www.rstudio.com/).



Kurslitteratur
========================================================

## Kursboken
Kursboken *A first course in statistical programming with R* av Braun och Murdoch.

## Artiklar 
- *Dates and Times Made Easy with* ```lubridate``` [[ladda ned]](http://www.jstatsoft.org/v40/i03/paper)
- *Handling and processing strings in R* [[ladda ned]](http://gastonsanchez.com/Handling_and_Processing_Strings_in_R.pdf)
- *Best practices for scientific computing* [[ladda ned]](http://arxiv.org/abs/1210.0530)

Kurslitteratur II: Extramaterial
========================================================
## Videoföreläsningar
- Google Developers (GD) videomaterial [[här]](http://www.youtube.com/watch?v=iffR3fWv4xw&list=PLyYlLs02rgBYRWBzYpoHz7m2SE8mEZ68w)
- Roger Pengs föreläsningar (RP) [[här]](http://www.youtube.com/user/rdpeng/videos)

## R Reference card v.2
Ett par sidor med viktiga funktioner i R. [[ladda ned]](http://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf)

Examination
========================================================
- Datalabbar
- Datortentamen i datasal
  + *Hjälpmedel:* R reference card v.2 (digitalt)

Datorlaborationer
========================================================
- Börja direkt!
- Är ~~obligatoriska~~.
- ~ 15 h arbete
- Laborationsmall finns på hemsidan
- Labbarna lämnas in via LISAM och autorättas
- ```markmyassignment```
- Filer på kurshemsidan
- 100 % rätt för godkänt
- Samordning med linjär algebra

markmyassignment
========================================================

- Paket för direkt återkoppling på labbar
- Underlätta lärandet
- Utvecklats till årets kursomgång
- **Kom gärna med synpunkter!**

```{r, eval=FALSE}
set_assignment()
show_tasks()
mark_my_assignment()
```

Datorn, programering och R
========================================================
type: section

Datorns delar
========================================================
![Datorns delar](http://www.bubblews.com/assets/images/news/911238892_1364462242.jpg)

R och datorn
========================================================
- En bra minnesregel är:
  - Hårddisk = I bokhyllan
  - Internminne (RAM) = På skrivbordet

**R arbetar på i internminnet (skrivbordet)**


Vad är programering?
========================================================
incremental: true
- Instruera en dator att utföra uppgifter
- Mjukvaruutveckling / vetenskaplig programmering
- Lågnivåspråk / Högnivåspråk 
- Kompilerande / Intepreterande språk

Varför programera?
========================================================
incremental: true
- Hantera (stora och komplexa) data
- Replikerbarhet i analyser
- Utföra komplexa beräkningar
- Utföra och automatisera (tråkiga) rutinuppgifter
- Effektivt användande av tid


Vad är R?
========================================================
- Populäraste programmeringsspråket för statistiker
- Bygger på öppen källkod (gratis och transparent)
- Många utvecklare - stor funktionalitet
- Finns för Windows, Mac och Linux
- Högnivåspråk (enklare)
- Största analysspråket från 2014
- Mer information i RP:s video "Overview and Background"
- Ett "klister" för statistiska analyser

Ett exempel på ett program
========================================================
incremental: true
Vi skriva ett program som utgår från talet 7 och skriver sedan de följande 3 udda talen på skärmen.  
Programmet avslutas med meddelandet ’Klar!’.

I R ser det ut på följande sätt

```{r,echo=TRUE,eval=FALSE}
talet <- 7
for (i in 1:3) {
  talet <- talet + 2 
  print(talet)
}
print("Klar!")
```

Resultatet
========================================================
Kör vi koden i R får vi följande resultat:

```{r,echo=FALSE,eval=TRUE}
talet <- 7
for (i in 1:3) {
  talet <- talet + 2 
  print(talet)
}
print("Klart!")
```


Introduktion till programering i R
========================================================
type: section

Installation av R och R-Studio
========================================================
## R
1. Gå till [http://www.r-project.org/](http://www.r-project.org/)
2. Download, Packages > CRAN > Sweden > Swedish University Computer Network
3. Välj ditt operativsystem, ladda ned och installera R

## R-Studio
1. Gå till [http://www.rstudio.com/](http://www.rstudio.com/)
2. Powerful IDE for R > Download now > Download RStudio Desktop
3. Välj ditt operativsystem, ladda ned och installera R-Studio


Demo: R och R-Studio
====================================
type: section


Variabler (objekt) och vektorer i R
====================================
- "spara" värden
- Vektorer är 1+ element av samma typ (ex. heltal).  
- Jmf. linjär algebra.
- Skapas (enklast) med ```c()``` 
- Indexering/slicing med ```[ ]```
Exempel:
```{r, eval=TRUE}
testScore <- c(7,15,20,23,1.2)
testScore[3]
```

Vektoraritmetik
====================================
- Sker elementvis
```{r, eval=TRUE}
testScore <- c(7,15,20,23,1.2)
testScore * 2
```

- Recycling
```{r, eval=TRUE}
x <- c(5,2,1)
y <- c(7,4)
y + x
```

Att söka hjälp
====================================
incremental: true
- Hjälpen i R 
- Google, Google, Google
- Stack overflow / R help
- Sök på engelska
- Sök / studera på felmeddelandet från R
```{r,echo=FALSE,eval=TRUE}
cat("Error in eval(expr, envir, enclos) : object 'x' not found")
```
- Mer information i RP:s video "How to get Help"

Demo: Variabler och vektorer
====================================
type: section

Variabeltyper
========================================================
type: section

Variabeltyper
========================================================
- Olika typer av värden på variabler, ex:
  - Heltal, Numeriska värden, Textsträngar
- Kallas för atomära klasser
- För att undersöka vilken klass en variabel har används: ```typeof()```
- För att konvertera mellan klasser används ```as.``` - funktioner (finns för alla variabeltyper). Ex:
```{r}
as.character(1:5)
```

Variabeltyper, översikt
========================================================

Beskrivning | Synonymer | ```typeof()``` | Exempel i R
----- | ---- | ----- | ---- | ----
Heltal ($\mathbb{Z}$) | ```int``` | ```integer``` | ```-1, 0, 1``` 
Reella tal ($\mathbb{R}$) | ```real```, ```double```, ```float``` | ```numeric``` | ```1.03, -2.872``` 
Komplexa tal ($\mathbb{C}$) | ```cplx``` | ```complex``` | ```1 + 2i``` 
Logiska värden | ```boolean```, ```bool```, ```logi``` | ```logical``` | ```TRUE FALSE``` 
Textsträngar | ```string```, ```char``` | ```character``` |  ```Go R!``` 



Introduktion till funktioner i R
========================================================
type: section

Introduktion till funktioner
========================================================
incremental: true

- "Allt som existerar är objekt, allt som sker är funktioner"
- Tar noll eller flera **argument** 
- Flera funktioner samlas i R-paket
- Många och små funktioner är det bästa!
- Kod som vi vill använda flera gånger
- Svårare att felsöka än vanlig kod.
- Grunden för bra och säker kod. Modularisering. Testbarhet.


Introduktion till funktioner
========================================================

<p align="center">
  <img src="https://figures.boundless.com/14595/raw/function-machine2.svg" alt="Function"/>
</p>


Funktioners struktur
========================================================
En funktion i R består (ofta) av:
- ett funktionsnamn (ex. ```f```)
- en funktionsdefinition: ```function()```
- 0 eller flera argument (ex. ```x``` och ```y```)
- "curly bracers" ```{}```
- programkod / funktionen (ex. ```res <- x + y```)
- returnera värde (ex. ```return(res)```)


Exempel på funktion
========================================================
incremental: true

```{r,echo=TRUE,eval=TRUE}
f <- function(x, y){
  resultat <- x + y
  return(resultat)
}
```

```{r,echo=TRUE,eval=TRUE}
f(x = 3, y = 2)
```

Lokal miljö
========================================================
- "Det som sker i funktionen, stannar i funktionen"

```{r,echo=TRUE,eval=TRUE}
f <- function(x, y){
  z <- 1
  res <- z+x+y
  return(res)
}
```

Lokal miljö II
========================================================
incremental: true

```{r,echo=TRUE,eval=TRUE}
ls()
f(1,2)
ls()
```


Att tänka på med funktioner
========================================================

- Funktionen måste "köras" innan den fungerar
- ```return()``` avslutar funktionen
- Skriv i flera delar
  - Börja med kod som fungerar
  - Lyft in i funktionen
  - Pröva funktionen

Demo: Introduktion till funktioner
========================================================
type: section


Logik
========================================================
type: section

Kort om logik
========================================================
incremental: true
- Logiska värden återkommer ofta 
- De logiska värdena: ```TRUE, FALSE, NA```
- Skapas på två sätt:
  + Som vanliga vektorer
  + Med relationsoperatorer
- Kan användas för indexering

Kort om logik II
========================================================

```{r}
minVektor <- c(12,1,2,7)
minBool <- c(TRUE, FALSE, FALSE, TRUE)
minVektor[minBool]
```


Logiska operatorer
========================================================
- Boolsk algebra
- Operatorer:

| Operator | Symbol | Operator i R |
| --- | --- | --- |
| och (and) | $\wedge$ | ```&``` |
| eller (or) | $\vee$ | $|$ |
| icke (not) | $\neg$ | ```!``` |

Logiska operatorer (forts.)
========================================================
incremental: true

| Symbol | $A$ | $B$ | $\neg A$ | $A \wedge B$ | $A \vee B$ |
| --- | --- | --- | --- | --- | --- |
| i R | ```A``` | ```B``` | ```!A``` | ```A & B``` | ```A``` $|$ ```B``` |
|  | ```TRUE``` | ```TRUE``` | ```FALSE``` | ```TRUE``` | ```TRUE``` |
|  | ```TRUE``` | ```FALSE``` | ```FALSE``` | ```FALSE``` | ```TRUE``` |
|  | ```FALSE``` | ```TRUE``` | ```TRUE``` | ```FALSE``` | ```TRUE``` |
|  | ```FALSE``` | ```FALSE``` | ```TRUE``` | ```FALSE``` | ```FALSE``` |

- Kan kombineras för komplicerade uttryck: 

```{r}
(FALSE & !TRUE) | FALSE
````


Relationsoperatorer
========================================================
- Jämförelser
- I *R reference card v.2* under operatorer
- Skapar logiska vektorer

| Beskrivning | Operatorer i R |
| ----- | ---- |
| Lika med  | ```==``` |
| Inte lika med  | ```!=``` |
| Större än | ```>``` |
| Mindre än | ```<``` |
| Större än eller lika med  | ```>=``` |
| Mindre än eller lika med  | ```<=``` |
| Finns i  | ```%in%``` |

Relationsoperatorer (Exempel)
========================================================
incremental: true

```{r}
x <- c(1, 2, 3, 4, 5)
x != 5
x > 2
```


Kort om logik III - Allt på en gång
========================================================
incremental: true

```{r}
minVektor <- c(12,1,2,7,99)
minBool <- minVektor > 5 & minVektor < 50
minVektor[minBool]
```

Demo: Logik
========================================================
type: section
