#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{fancyhdr}%The first page setting
\fancypagestyle{plain}
{%
  \fancyhf{} % clear all header and footer fields
  \fancyhead[L]{
    LINK\"OPING UNIVERSITY\\
    Avdelningen för Statistik\\
    Institutionen för datavetenskap
  }
  \fancyhead[R]{Programming i R}
}
%The remaining pages

\fancyhead[RO,LE]{}
\fancyhead[C]{Programming i R}
\fancyhead[LO,RE]{}

 
\end_preamble
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language swedish
\language_package auto
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Datorlaboration 3
\end_layout

\begin_layout Author
Måns Magnusson
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<prompt=TRUE,eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Global options
\end_layout

\begin_layout Plain Layout

opts_chunk$set(comment='') 
\end_layout

\begin_layout Plain Layout

options(digits = 5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IntroDel1.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Datorlaboration
\end_layout

\begin_layout Chapter
Programkontroll
\end_layout

\begin_layout Standard
En av de centrala delarna för att skriva effektiva och väl fungerande funktioner
 och kod i R är att kunna styra programmen på ett bra sätt.
 För detta används så kallad programkontroll.
 Generellt sett kan man säga att programkontrollen består av två huvudsakliga
 delar, villkorssatser och loopar.
\end_layout

\begin_layout Section
Villkorssatser
\end_layout

\begin_layout Standard
Villkorssatser används för att kontrollera flödet i programmeringen på ett
 smidigt sätt och beroende på huruvida ett villkor är uppfyllt eller inte
 ska programmet göra olika saker.
 Grunden för villkorststyrning är 
\family typewriter
if
\family default
.
 Vill vi styra ett program behöver vi med logiska värdet ange vilka delar
 som ska utföras.
 Med if utförs dessa OM 
\family typewriter
if
\family default
-satsen är sann (
\family typewriter
TRUE
\family default
), annars utförs den inte.
 Vi kan sedan använda 
\family typewriter
else
\family default
 för de fall då uttrycket i if är falskt (
\family typewriter
FALSE
\family default
).
\end_layout

\begin_layout Standard
Villkorssatser bygger helt på logiska värden i R som behandlades tidigare
 under laborationen om Logik i R.
\end_layout

\begin_layout Enumerate
Skapa 
\family typewriter
if
\family default
-satsen nedan.
 Pröva att ändra värdet på 
\family typewriter
x
\family default
 på lämpligt sätt och se hur resultatet av 
\family typewriter
if
\family default
-satsen ändras.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

x <- -100
\end_layout

\begin_layout Plain Layout

if (x < 0) print("Hej!")
\end_layout

\begin_layout Plain Layout

if (x > 0) print("Hej hej!")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
För att kunna göra fler beräkningar i en 
\family typewriter
if
\family default
-sats måste 
\family typewriter
{ }
\family default
 användas.
 Kör koden nedan.
 Pröva olika värdet på 
\family typewriter
x
\family default
.
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

x<- -20
\end_layout

\begin_layout Plain Layout

if(x < 0){
\end_layout

\begin_layout Plain Layout

	print("Negativt x")
\end_layout

\begin_layout Plain Layout

	a <- pi + 23
\end_layout

\begin_layout Plain Layout

	print(a)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

if(x >= 0){
\end_layout

\begin_layout Plain Layout

	a <- 100
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

print(a)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Alla logiska värden kan användas - så länge det är ett enda logiskt värde.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

if(TRUE) x <- "Lotta"
\end_layout

\begin_layout Plain Layout

if(FALSE) x <- "Lisa"
\end_layout

\begin_layout Plain Layout

if(x == "Lotta"){
\end_layout

\begin_layout Plain Layout

	print("Hej Lotta!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

if(!TRUE) x <- "Lisa"
\end_layout

\begin_layout Plain Layout

if(x == "Lisa"){
\end_layout

\begin_layout Plain Layout

	print("Hej Lisa!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Nästa steg är att lägga till en 
\family typewriter
else
\family default
-sats.
 Testa nu att köra följande 
\family typewriter
if
\family default
 
\family typewriter
else
\family default
-sats (testa med olika värden för 
\family typewriter
x
\family default
)
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- 100
\end_layout

\begin_layout Plain Layout

if(x < 0){
\end_layout

\begin_layout Plain Layout

	a <- 1
\end_layout

\begin_layout Plain Layout

	print("Negativt x")
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

	a <- 2
\end_layout

\begin_layout Plain Layout

	print("Positivt eller noll")
\end_layout

\begin_layout Plain Layout

}	
\end_layout

\begin_layout Plain Layout

a
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att göra en 
\family typewriter
if-else
\family default
-sats som skriver ut 
\family typewriter

\begin_inset Quotes eld
\end_inset

Male
\begin_inset Quotes erd
\end_inset


\family default
 om värdet 
\family typewriter
x
\family default
 är 
\family typewriter

\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset


\family default
 och 
\family typewriter

\begin_inset Quotes eld
\end_inset

Female
\begin_inset Quotes erd
\end_inset


\family default
 om värdet 
\family typewriter
x
\family default
 är 
\family typewriter

\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset


\family default
.
\end_layout

\begin_layout Enumerate
Det går också att göra flera logiska tester med fler 
\family typewriter
if
\family default
 - 
\family typewriter
else
\family default
.
 Testa nu att köra en 
\family typewriter
if
\family default
 - 
\family typewriter
else if
\family default
 - 
\family typewriter
else
\family default
 - sats med flera nivåer:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

if(x==0){
\end_layout

\begin_layout Plain Layout

	print("x är noll")
\end_layout

\begin_layout Plain Layout

} else if(x < 0){
\end_layout

\begin_layout Plain Layout

	print("x är negativ")
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

	print("x är positiv")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skapa variabeln 
\family typewriter
cool_kvinna
\family default
.
 Skapa en 
\family typewriter
if
\family default
 - 
\family typewriter
else if
\family default
 - 
\family typewriter
else
\family default
 sats som skriver ut födelseåret om vi anger förnamnet som ett textelement.
 Anges något annat namn/text ska programmet returnera 
\family typewriter
NA
\family default
.
\end_layout

\begin_deeper
\begin_layout Enumerate
Amelia Earhart (1897)
\end_layout

\begin_layout Enumerate
Ada Lovelace (1815)
\end_layout

\begin_layout Enumerate
Vigdis Finnbogadottir (1930)
\end_layout

\end_deeper
\begin_layout Subsection
* Extraproblem
\end_layout

\begin_layout Enumerate
Skapa ett program som med en villkorssats som skriver ut namnet på en av
 kvinnorna ovan om rätt födelseår har angetts.
 Om inget korrekt födelseår har angett ska programmet skriva ut 
\family typewriter

\begin_inset Quotes eld
\end_inset

Hillary Clinton
\begin_inset Quotes erd
\end_inset


\family default
.
\end_layout

\begin_layout Section
Loopar
\end_layout

\begin_layout Standard
En av de mest centrala verktygen för all programmering är användandet av
 loopar.
 Dessa används för att utföra upprepande uppgifter och är en central del
 i att skriva välfungerande program.
\end_layout

\begin_layout Subsection

\family typewriter
for
\family default
 - loop
\end_layout

\begin_layout Enumerate
En 
\family typewriter
for
\family default
-loop har ett loop-element (
\family typewriter
i
\family default
) och en loop-vektor (
\family typewriter
1:10
\family default
).
 I koden nedan är 
\family typewriter
i
\family default
 loop-elementet och 
\family typewriter
1:10
\family default
 är vektorn som loopas över.
 Testa att köra koden.
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

for(i in 1:10){
\end_layout

\begin_layout Plain Layout

	x<-i+3
\end_layout

\begin_layout Plain Layout

	print(x)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in 1:10) print(i+3)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

y <- 0
\end_layout

\begin_layout Plain Layout

for(i in 1:10) {
\end_layout

\begin_layout Plain Layout

    y <- y + i
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Testa att ändra 
\family typewriter
1:10
\family default
 till 
\family typewriter
1:5
\family default
 och 
\family typewriter
5:1
\family default
.
 Vad händer nu? Testa att använda loop-vektorn 
\family typewriter
seq(1, 6, by=2)
\end_layout

\begin_layout Enumerate
Skriv en 
\family typewriter
for
\family default
-loop som skriver ut texten 
\family typewriter
Övning ger färdighet
\family default
 20 gånger med 
\family typewriter
print()
\family default
.
 
\end_layout

\begin_layout Enumerate
Testa nu att köra koden nedan.
 Vad händer? Testa att ändra på vektorn 
\family typewriter
minVektor
\family default
 till lämplia värden.
 Vilka värden ska 
\family typewriter
minVektor
\family default
 ha om du vill bara skriva ut de tre sista orden? 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

minaOrd <- c("campus","sal","kravall","tenta","senare","konjunktur")
\end_layout

\begin_layout Plain Layout

minVektor<-1:5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in 1:length(minaOrd)){
\end_layout

\begin_layout Plain Layout

	print(minaOrd[i])
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in minVektor){
\end_layout

\begin_layout Plain Layout

	print(minaOrd[i])
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(ord in minaOrd){
\end_layout

\begin_layout Plain Layout

	print(minaOrd[i])
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
En bra funktion för att skapa loop-vektorer är funktionen 
\family typewriter
seq_along()
\family default
.
 Den skapar en loop-vektor på samma sätt som 
\family typewriter
1:length(minaOrd)
\family default
.
 Dock blir det tydligare i koden vad loopen gör (sequence along 
\family typewriter
minaOrd
\family default
).
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

for(i in 1:length(minaOrd)){
\end_layout

\begin_layout Plain Layout

	print(i)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in seq_along(minaOrd)){
\end_layout

\begin_layout Plain Layout

	print(i)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Det går också att använda en loop för att iterera över element i en lista.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

myList <- list("Hej",3:8,c("Lite mer text", "och lite nuffror"), 4:12)
\end_layout

\begin_layout Plain Layout

for (element in myList){
\end_layout

\begin_layout Plain Layout

	print(element)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att skriva en 
\family typewriter
for
\family default
-loop som:
\end_layout

\begin_deeper
\begin_layout Enumerate
Summerar talen 0 till 200
\end_layout

\begin_layout Enumerate
Skriver ut 
\begin_inset Quotes eld
\end_inset

I love R!
\begin_inset Quotes erd
\end_inset

 20 gånger
\end_layout

\begin_layout Enumerate
Skriver ut talen 1 till 20 och den kumulativa summan från 1 till 20
\end_layout

\end_deeper
\begin_layout Subsection
* Extraproblem
\end_layout

\begin_layout Enumerate
Skriv en 
\family typewriter
for
\family default
-loop som skriver ut alla heltal som är jämt delbara med 13 som finns mellan
 1 och 200 med hjälp av en loop och villkorssats.
 [
\series bold
Tips!
\series default
 
\family typewriter
?%%
\family default
]
\end_layout

\begin_layout Enumerate
Skriv en 
\family typewriter
for
\family default
-loop som skriver ut alla heltal som är jämt delbara med 3 som finns mellan
 1 och 200.
 Förutom att skriva ut dessa tal ska de även sparas i en vektorn 
\family typewriter
delatMedTre
\family default
.
 Men bara de tal som är 
\series bold
udda
\series default
 ska vara med.
 Använd en villkorssats för att göra den förändingen.
 Om ett av talen är jämt, så skriv ut texten 
\family typewriter

\begin_inset Quotes eld
\end_inset

Intresserar mig inte
\begin_inset Quotes erd
\end_inset


\family default
 till skärmen.
 [
\series bold
Tips!
\series default
 
\family typewriter
?%%]
\end_layout

\begin_layout Subsection
Nästlade 
\family typewriter
for
\family default
-loopar
\end_layout

\begin_layout Enumerate
Följande kod är ett exempel på en nästlad loop för att loopa över flera
 index (exempelvis rader och kolumner).
 Denna loop är nästlad i två nivåer.
 I teorin kan vi nästla en loop i hur många nivåer vi vill.
 Men ju fler nivåer, desto svårare är det att kunna läsa koden och följa
 vad som sker i programmet.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

for (i in 1:2){
\end_layout

\begin_layout Plain Layout

	for (j in 1:3){
\end_layout

\begin_layout Plain Layout

		print(i)
\end_layout

\begin_layout Plain Layout

		print(j)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Vi ska nu pröva att summera elementen i två matriser med en nästlad 
\family typewriter
for
\family default
-loop.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

A <- matrix(1:6,ncol=3)
\end_layout

\begin_layout Plain Layout

B <- matrix(1:6,ncol=3)
\end_layout

\begin_layout Plain Layout

C <- matrix(0, ncol=3, nrow=3)
\end_layout

\begin_layout Plain Layout

for (i in 1:2){
\end_layout

\begin_layout Plain Layout

	for (j in 1:3){
\end_layout

\begin_layout Plain Layout

		print(A[i,j])
\end_layout

\begin_layout Plain Layout

		print(B[i,j])
\end_layout

\begin_layout Plain Layout

		C[i,j] <- A[i,j] + B[i,j]
\end_layout

\begin_layout Plain Layout

		print(C[i,j])
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Ändra koden ovan för matriser som är av storlek 
\begin_inset Formula $3\times3$
\end_inset

.
 Testa med följande två matriser.
 Hur behöver du ändra matrisen för att det ska fungera?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

A <- matrix(1:9,ncol=3)
\end_layout

\begin_layout Plain Layout

B <- matrix(10:8,ncol=3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
while
\family default
 loopar
\end_layout

\begin_layout Enumerate
En 
\family typewriter
while
\family default
-loop loopar så länge villkoret är sant och inte ett bestämt antal gånger
 som 
\family typewriter
for
\family default
-loopar.
 På detta sätt liknar det en 
\family typewriter
if
\family default
-sats fast som loop.
 Testa koden nedan med några olika värden på 
\family typewriter
x
\family default
.
\begin_inset CommandInset label
LatexCommand label
name "enu:En-while-loop-loopar"

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x<-1 
\end_layout

\begin_layout Plain Layout

while(x<10){
\end_layout

\begin_layout Plain Layout

  print("x is less than 10")
\end_layout

\begin_layout Plain Layout

  x<-x+1 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Om inte 
\family typewriter
while
\family default
-loopar skrivs på rätt sätt kan de loopa i 
\begin_inset Quotes eld
\end_inset

oändlighet
\begin_inset Quotes erd
\end_inset

.
 Vad är viktigt att tänka på i while-loop används för att undvika detta?
 
\begin_inset Newline newline
\end_inset


\series bold
Obs!
\series default
 Om du testar koden nedan vill du nog avbryta.
 
\begin_inset Newline newline
\end_inset

I R-studio: trycka på stop-knappen i kanten på console - fönstret eller
 med menyn 
\begin_inset Quotes eld
\end_inset

Tools
\begin_inset Quotes erd
\end_inset

->
\begin_inset Quotes erd
\end_inset

Interrupt R
\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Newline newline
\end_inset

Om du kör vanliga R: tryck 
\begin_inset Quotes eld
\end_inset

ctrl+C
\begin_inset Quotes erd
\end_inset

 .
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x<-1 
\end_layout

\begin_layout Plain Layout

while(x<10){
\end_layout

\begin_layout Plain Layout

  print("x is less than 10")
\end_layout

\begin_layout Plain Layout

  x<-x-1 
\end_layout

\begin_layout Plain Layout

  print(x)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skriv en 
\family typewriter
while
\family default
 - loop som:
\end_layout

\begin_deeper
\begin_layout Enumerate
Skriver ut talen 1 till 35
\end_layout

\begin_layout Enumerate
Summerar talen 5 till 200
\end_layout

\begin_layout Enumerate
Skriver ut 
\begin_inset Quotes eld
\end_inset

I love R!
\begin_inset Quotes erd
\end_inset

 20 gånger
\end_layout

\begin_layout Enumerate
Skriver ut talen 1 till 20 och den kumulativa summan från 1 till 20
\end_layout

\begin_layout Enumerate
Skriver ut alla jämna tal mellan 1 och 20.
 [
\series bold
Tips!
\series default
 
\family typewriter
?%%]
\end_layout

\end_deeper
\begin_layout Subsection
Kontrollstrukturer för loopar och 
\family typewriter
repeat{}
\end_layout

\begin_layout Standard
För att kontrollera loopar finns det två huvudsakliga kontrollstrukturer.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kontrollstruktur
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Betydelse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
next()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoppa vidare till nästa iteration i loopen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
break()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avbryt den aktuella loopen
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Dessa två sätt att kontrollera en loop är mycket värdefulla och gör det
 möjligt att avsluta en hel loop i förtid (
\family typewriter
break
\family default
) eller hoppa över beräkningar för den nuvarande iterationen (
\family typewriter
next
\family default
).
\end_layout

\begin_layout Enumerate
Nedan är ett exempel på kod som använder kontrollstrukturen 
\family typewriter
next
\family default
.
 Innan beräkningar i loopen görs prövar vi med en villkorssats om beräkningen
 är möjlig.
 
\begin_inset Newline newline
\end_inset

Pröva koden och pröva sedan att ta bort 
\family typewriter
next
\family default
 och se vad som händer.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

myList <- list("Hej",3:8,c("Lite mer text", "och lite nuffror"), 4:12)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for (element in myList){
\end_layout

\begin_layout Plain Layout

	if(typeof(element) != "integer"){ next() }
\end_layout

\begin_layout Plain Layout

	print(mean(element))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Använd nu 
\family typewriter
next()
\family default
 för att skriva ut alla tal mellan 13 och 200 som är jämt delbara med 13.
 [
\series bold
Tips!
\series default
 
\family typewriter
%%
\family default
]
\end_layout

\begin_layout Enumerate
På samma sätt som 
\family typewriter
next
\family default
 kan användas för att begränsa vissa beräkningar kan 
\family typewriter
break
\family default
 avsluta en 
\family typewriter
for
\family default
-loop när exempelvis en beräkning är tillräckligt bra.
 Det blir då en form av 
\family typewriter
while
\family default
 loop fast med ett begränsat antal iterationer.
 
\family typewriter
while
\family default
 loopen i uppgift 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:En-while-loop-loopar"

\end_inset

 på sida 
\begin_inset CommandInset ref
LatexCommand pageref
reference "enu:En-while-loop-loopar"

\end_inset

 kan på detta skrivas om med 
\family typewriter
break
\family default
 på följande sätt.
 Pröva denna kod och experimentera lite med 
\family typewriter
x
\family default
.
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

x<-1 
\end_layout

\begin_layout Plain Layout

for (i in 1:20) {
\end_layout

\begin_layout Plain Layout

  if( x > 10 ) break() 
\end_layout

\begin_layout Plain Layout

  print("x is less than 10")
\end_layout

\begin_layout Plain Layout

  x<-x+1 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skriv en 
\family typewriter
for
\family default
 - loop som itererar över loop vektorn 
\family typewriter
1:100
\family default
.
 Använd 
\family typewriter
break
\family default
 för att...
\end_layout

\begin_deeper
\begin_layout Enumerate
Skriver ut talen 1 till 35
\end_layout

\begin_layout Enumerate
Summerar talen 1 till 20
\end_layout

\begin_layout Enumerate
Skriver ut 
\begin_inset Quotes eld
\end_inset

I love R!
\begin_inset Quotes erd
\end_inset

 20 gånger
\end_layout

\end_deeper
\begin_layout Standard
En sista typ av loop som kan användas är 
\family typewriter
repeat{}
\family default
.
 Till skillnad från for och while-loopar kommer denna struktur fortsätta
 iterera till dess att den stöter på ett 
\family typewriter
break
\family default
.
 Precis som med 
\family typewriter
while
\family default
-loopar kan detta innebära att programmet aldrig avslutas.
\end_layout

\begin_layout Enumerate
Nedan är ett exempel på kod som använder 
\family typewriter
repeat{}
\family default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

x<-1 
\end_layout

\begin_layout Plain Layout

repeat {
\end_layout

\begin_layout Plain Layout

  x <- x + 1
\end_layout

\begin_layout Plain Layout

  print(x)
\end_layout

\begin_layout Plain Layout

  if( x > 5 ) break() 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skapa en 
\family typewriter
repeat
\family default
-loop som...
\end_layout

\begin_deeper
\begin_layout Enumerate
Skriver ut talen 1 till 35
\end_layout

\begin_layout Enumerate
Summerar talen 1 till 20
\end_layout

\begin_layout Enumerate
Skriver ut 
\begin_inset Quotes eld
\end_inset

I love R!
\begin_inset Quotes erd
\end_inset

 20 gånger
\end_layout

\end_deeper
\begin_layout Subsection
* Extraproblem
\end_layout

\begin_layout Enumerate
Skapa med 
\family typewriter
repeat
\family default
, 
\family typewriter
next
\family default
 och 
\family typewriter
break
\family default
 kod som gör följande:
\end_layout

\begin_deeper
\begin_layout Enumerate
Skriver ut alla jämna tal mellan 3 och 17.
\end_layout

\begin_layout Enumerate
Beräknar och skriver ut resultat i varje steg av den kumulativa summan från
 10 till 20.
\end_layout

\end_deeper
\begin_layout Section
Avbryta funktioner och generera varningar
\end_layout

\begin_layout Standard
Ibland vill vi att ett program ska avbrytas om vissa villkor inte är uppfyllda.
 Det kan vara att argument till en funktion inte är korrekt eller att resultat
 som beräknats är felaktiga.
 För att avbryta ett R-program använder vi 
\family typewriter
stop()
\family default
.
\end_layout

\begin_layout Enumerate
Skapa följande funktion (som avbryts om 
\family typewriter
x>10
\family default
) och pröva lite olika värden på 
\family typewriter
x
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

test_funktion <- function(x){
\end_layout

\begin_layout Plain Layout

  if(x>10) stop()
\end_layout

\begin_layout Plain Layout

  return("Yay!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Det går också att generera 
\series bold
felmeddelanden
\series default
 med 
\family typewriter
stop()
\family default
.
 Detta kan vara bra för att kunna identifiera var programmet var tvungen
 att avbrytas.
 Pröva att lägga till felmeddelandet nedan.
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

test_funktion <- function(x){
\end_layout

\begin_layout Plain Layout

  if(x>10) stop("x > 10 juh!")
\end_layout

\begin_layout Plain Layout

  return("Yay!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ibland kan det vara så att vi inte vill avbryta ett pågående program utan
 att vi istället bara skulle vilja varna för att det kan vara något fel.
 Det görs med funktionen 
\family typewriter
warning()
\family default
.
 
\end_layout

\begin_layout Enumerate
Skapa följande funktion (som avbryts om 
\family typewriter
x>10
\family default
) och pröva lite olika värden på 
\family typewriter
x
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

test_funktion <- function(x){
\end_layout

\begin_layout Plain Layout

  if(x>10) warning()
\end_layout

\begin_layout Plain Layout

  return("Yay!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Med 
\family typewriter
warning()
\family default
 kan vi också ange varningsmeddelanden.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

test_funktion <- function(x){
\end_layout

\begin_layout Plain Layout

  if(x>10) warning("x>10 juh!")
\end_layout

\begin_layout Plain Layout

  return("Yay!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Om ett program genererar flera varningar sparas dessa och det går att gå
 igenom samtliga varningar efter att programmet kört klart.
 För att koma åt dessa varningar använder vi funktionen 
\family typewriter
warnings()
\family default
.
 Pröva följande kod.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

for(i in 1:20){
\end_layout

\begin_layout Plain Layout

	test_funktion(i)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
En fördel med varningar är att vi kan tysta dem om vi vill.
 Detta går inte med ex.
 
\family typewriter
cat()
\family default
 eller 
\family typewriter
print()
\family default
 vilket gör att dessa funktioner inte ska användas för att generera varningar.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

suppressWarnings(test_funktion(100))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Inlämningsuppgifter
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Inluppg.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

# Set you (local) path
\end_layout

\begin_layout Plain Layout

solution_path <- "/Users/manma97/Dropbox/Doktorandstudier/Undervisning/Statistis
k programmering i R/KursRprgmTeacher/Labs/exercise_solutions/"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

solution_files <- dir(solution_path)
\end_layout

\begin_layout Plain Layout

for(sol_file in solution_files) source(file = paste0(solution_path, sol_file),
 echo = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Inlämningsuppgifter
\end_layout

\begin_layout Standard
För att använda 
\family typewriter
markmyassignment
\family default
 i denna laboration ange:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

library(markmyassignment)
\end_layout

\begin_layout Plain Layout

lab_path <-
\end_layout

\begin_layout Plain Layout

"https://raw.githubusercontent.com/MansMeg/KursRprgm/master/Labs/Tests/d3.yml"
\end_layout

\begin_layout Plain Layout

set_assignment(lab_path)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section

\family typewriter
bmi()
\end_layout

\begin_layout Standard
Skriv en funktion som du kallar 
\family typewriter
bmi()
\family default
 med argumenten 
\family typewriter
bodyHeight
\family default
 och 
\family typewriter
bodyWeight
\family default
.
 Funktionen ska beräkna BMI på följande sätt: 
\begin_inset Formula 
\[
\texttt{bmi(body\_weight,body\_height)}=\frac{\texttt{body\_weight}}{\texttt{body\_height}^{2}}
\]

\end_inset

och returnera värdet.
 Om 
\family typewriter
body_height
\family default
 och/eller 
\family typewriter
body_weight
\family default
 är mindre eller lika med 0 ska funktionen varna att den aktuella variabeln
 är mindre eller lika med 0 och att resultatet inte är meningsfullt:
\end_layout

\begin_layout Standard

\family typewriter
body_weight is not positive, calculation is not meaningful
\family default
 eller
\end_layout

\begin_layout Standard

\family typewriter
body_height is not positive, calculation is not meaningful
\end_layout

\begin_layout Standard
Testa med olika värden för 
\family typewriter
body_length
\family default
 och 
\family typewriter
body_weight
\family default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Här är ett textexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

bmi(body_weight = 95, body_height = 1.98)
\end_layout

\begin_layout Plain Layout

myBMI <- bmi(body_weight = 95, body_height = 1.98)
\end_layout

\begin_layout Plain Layout

myBMI
\end_layout

\begin_layout Plain Layout

bmi(body_weight = 74, body_height = -1.83)
\end_layout

\begin_layout Plain Layout

bmi(body_weight = 0, body_height = 1.63)
\end_layout

\begin_layout Plain Layout

bmi(body_weight = -73, body_height = 0)
\end_layout

\begin_layout Plain Layout

suppressWarnings(bmi(body_weight = -73, body_height = 0))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section

\family typewriter
my_matrix_prod()
\end_layout

\begin_layout Standard
En central del inom den linjära algebran är matrismultiplikation, d.v.s.
 att multiplicera två matriser med varandra.
 Du ska nu skapa en funktion kallad myMatrixProd() med argumenten A och
 B som multiplicerar två matriser med varandra på följande sätt:
\begin_inset Formula 
\[
\texttt{my\_matrix\_prod(A, B)}=\mathbf{A}\cdot\mathbf{B}
\]

\end_inset


\end_layout

\begin_layout Standard
Om dimensionerna inte gör det möjligt att multiplicera matriserna ska funktionen
 stoppas och returnera felmeddelandet 
\family typewriter
Matrix dimensions mismatch
\family default
.
 Observera att det inte är tillåtet att använda R:s funktion för matrismultiplik
ation 
\family typewriter
%*%
\family default
.
 Du får dock använda den för att generera fler testfall för att testa att
 din funktion räknar rätt.
\end_layout

\begin_layout Standard
De steg funktionen kan gå igenom är följande:
\end_layout

\begin_layout Enumerate
Pröva om dimensionerna av matris 
\series bold

\begin_inset Formula $\mathbf{A}$
\end_inset


\series default
 och 
\series bold

\begin_inset Formula $\mathbf{B}$
\end_inset


\series default
 innebär att de kan multipliceras med varandra, stoppa annars funktionen
 och returnera felmeddelandet.
\end_layout

\begin_layout Enumerate
Skapa en ny matris (ex.
 kallad 
\series bold

\begin_inset Formula $\mathbf{C}$
\end_inset


\series default
) med de dimensioner som produkten av A och B har.
\end_layout

\begin_layout Enumerate
Loopa över elementen i 
\series bold

\begin_inset Formula $\mathbf{C}$
\end_inset


\series default
 och räkna ut varje element för sig.
 [
\series bold
Tips!
\series default
 Här kan du använda din kod från 
\family typewriter
orth_scalar_prod()
\family default
]
\end_layout

\begin_layout Standard
Här är textexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

X <- matrix(1:6, nrow=2, ncol=3) 
\end_layout

\begin_layout Plain Layout

Y <- matrix(6:1, nrow=3, ncol=2) 
\end_layout

\begin_layout Plain Layout

my_matrix_prod(A = X, B = Y)
\end_layout

\begin_layout Plain Layout

my_matrix_prod(A = Y, B = X)
\end_layout

\begin_layout Plain Layout

my_matrix_prod(A = X, B = X)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section

\family typewriter
babylon()
\end_layout

\begin_layout Standard
En algoritm för att approximera kvadratroten ur ett tal är den så kallade
 babylonska metoden, en metod som flera säkert känner igen från gymnasiet.
 Metoden, som är ett specialfall av Newton-Raphsons metod, kan beskrivas
 på följande sätt:
\end_layout

\begin_layout Enumerate
Starta med ett godtyckligt förslag på kvadratroten, kallat 
\begin_inset Formula $r_{0}$
\end_inset


\end_layout

\begin_layout Enumerate
Beräkna ett nytt förslag på roten på följande sätt:
\begin_inset Formula 
\[
r_{n+1}=\frac{r_{n}+\frac{x}{r_{n}}}{2}
\]

\end_inset


\end_layout

\begin_layout Enumerate
Om 
\begin_inset Formula $\left|r_{n+1}-r_{n}\right|$
\end_inset

 inte har uppnått godtycklig nogrannhet: gå till steg 2 igen.
\end_layout

\begin_layout Standard
Implementera denna algoritm som en funktion i R.
 Funktionen ska heta 
\family typewriter
babylon()
\family default
 och argumenten 
\family typewriter
x
\family default
, 
\family typewriter
init
\family default
 och 
\family typewriter
tol
\family default
.
 
\family typewriter
x
\family default
 är talet för vilket kvadratroten ska approximeras, 
\family typewriter
init
\family default
 är det första förslaget på kvadratroten och 
\family typewriter
tol
\family default
 är hur stor noggrannhet som ska krävas.
\end_layout

\begin_layout Standard
Funktionen kan implementeras antingen som en 
\family typewriter
for
\family default
 - loop med 
\family typewriter
break
\family default
 eller en 
\family typewriter
while
\family default
 loop.
 Funktionen ska returnera en lista med två element, 
\family typewriter
rot
\family default
 och 
\family typewriter
iter
\family default
 (båda numeriska värden).
 I elementet 
\family typewriter
rot
\family default
 ska approximationen av kvadratroten returneras och i elementet 
\family typewriter
iter
\family default
 ska antalet iterationer returneras.
\end_layout

\begin_layout Standard
Här är textexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

babylon(x = 2, init = 1.5, tol = 0.01) 
\end_layout

\begin_layout Plain Layout

sqrt(2) 
\end_layout

\begin_layout Plain Layout

babylon(x = 3, init = 2, tol = 0.000001) 
\end_layout

\begin_layout Plain Layout

sqrt(3) 
\end_layout

\begin_layout Plain Layout

babylon(x = 15, init = 1.5, tol = 0.01) 
\end_layout

\begin_layout Plain Layout

sqrt(15)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section

\family typewriter
my_moving_average()
\end_layout

\begin_layout Standard
I denna uppgift ska vi skapa en funktion som beräknar glidande medelvärden
 som du kallar 
\family typewriter
my_moving_average().

\family default
 
\end_layout

\begin_layout Standard
Funktionen ska kunna ta en godtycklig vektor 
\family typewriter
x
\family default
, och ett argument 
\family typewriter
n
\family default
.
 Först ska den kontrollera att vektorn är numerisk.
 Är vektorn inte numerisk ska funktionen avbrytas och skriva ut felmeddelandet
 
\family typewriter

\begin_inset Quotes sld
\end_inset

Not a numeric vector!
\begin_inset Quotes srd
\end_inset


\family default
.
\end_layout

\begin_layout Standard
Annars ska funktionen beräkna det glidande medelvärdet på följande sätt
\begin_inset Formula 
\[
y_{t}=\frac{x_{t}+\cdots+x_{t+n}}{n}
\]

\end_inset

där 
\begin_inset Formula $y_{t}$
\end_inset

 är det 
\begin_inset Formula $t$
\end_inset

:e elementet i vektorn som ska returneras.
 Detta innebär att vektorn 
\begin_inset Formula $y$
\end_inset

 är 
\begin_inset Formula $n-1$
\end_inset

 element kortare än 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Standard
Här är textexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE>>=
\end_layout

\begin_layout Plain Layout

my_moving_average(x = 1:10, n=2) 
\end_layout

\begin_layout Plain Layout

my_moving_average(x = "Pelle", n=2)
\end_layout

\begin_layout Plain Layout

my_moving_average(x = 5:15, n=4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape italic
Grattis! Nu är du klar! 
\end_layout

\end_body
\end_document
