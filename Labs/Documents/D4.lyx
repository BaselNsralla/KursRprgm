#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{fancyhdr}%The first page setting
\fancypagestyle{plain}
{%
  \fancyhf{} % clear all header and footer fields
  \fancyhead[L]{
    LINK\"OPING UNIVERSITY\\
    Avdelningen för Statistik\\
    Institutionen för datavetenskap
  }
  \fancyhead[R]{Programming i R}
}
%The remaining pages

\fancyhead[RO,LE]{}
\fancyhead[C]{Programming i R}
\fancyhead[LO,RE]{}

 
\end_preamble
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language swedish
\language_package auto
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Datorlaboration 4
\end_layout

\begin_layout Author
Måns Magnusson
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<prompt=TRUE,eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Global options
\end_layout

\begin_layout Plain Layout

opts_chunk$set(comment='') 
\end_layout

\begin_layout Plain Layout

options(digits = 5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "IntroDel1.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Datorlaboration
\end_layout

\begin_layout Chapter
R-paket
\end_layout

\begin_layout Standard
R-paket är extra moduler/biblitek som läses in i R för att skapa extra funktiona
litet i form av nya funktioner eller nya data.
 De flesta funktioner som används i R finns i olika paket.
 Några få paket läses automatiskt in i R när vi startar R, medan andra paket
 måste vi läsa in aktivt för att få tillgång till funktionaliteten.
 Den stora mängd personer som bidrar till R gör det genom att utveckla nya
 funktioner som de sedan släpper som paket.
\end_layout

\begin_layout Standard
Paket är något som skiljer R från andra statistikprogram är attden mesta
 funktionaliteten inte kommer med från början.
 I andra programmeringsspråk är denna form av 
\series bold
modularisering
\series default
 betydligt vanligare.
 Den stora fördelen med detta är att vi bara behöver läsa in de paket vi
 verkligen har behov av just nu.
\end_layout

\begin_layout Standard
För att kunna använda ett paket behöver vi gå igenom två steg: 
\end_layout

\begin_layout Itemize
Paketet måste först installeras på din aktuella dator.
\end_layout

\begin_layout Itemize
Paketet måste sedan läsas in i den aktuella sessionen för att användas -
 eller anropas explicit.
\end_layout

\begin_layout Standard
Alla paket har olika versioner och generellt följer de kriterierna för 
\series bold
\color blue

\begin_inset CommandInset href
LatexCommand href
name "semantisk versionshantering"
target "http://semver.org/"

\end_inset


\series default
\color inherit
.
\end_layout

\begin_layout Enumerate
Först måste vi installera ett paket.
 Detta kan antingen göras genom CRAN (Comprehensive R Archive Network) på
 internet där de flesta paket ligger uppe.
 Detta görs med funktionen 
\family typewriter
install.packages()
\family default
.
 Pröva att installera 
\family typewriter
stringr
\family default
 och 
\family typewriter
lubrudate
\family default
 på detta sätt.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

install.packages("stringr")
\end_layout

\begin_layout Plain Layout

install.packages("lubridate")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
En annan server där det finns mycket paket är på github.com.
 Det är vanligt att paket som fortfarande utvecklas aktivt finns på både
 CRAN och github.com då github underlättar enormt för så kallad collaborativ
 utveckling där flera personer hjälps åt med utvecklingen.
 För att installera från github direkt behöver först paketet 
\family typewriter
devtools
\family default
 installeras.
 Pröva att installera paketet 
\family typewriter
pxweb
\family default
 på detta sätt med följande kod.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

install.packages("devtools") 
\end_layout

\begin_layout Plain Layout

devtools::install_github("pxweb","rOpenGov") 
\end_layout

\begin_layout Plain Layout

library(pxweb)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
För att läsa in ett paket (d.v.s.
 för att använda paketet i den aktuella sessionen) används funktionen 
\family typewriter
library()
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(pxweb)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Om flera paket har samma funktionsnamn kan vi bestämma exakt från vilket
 paket vi ska använda en given funktion med 
\family typewriter
::
\family default
.
 Då behöver vi inte först läsa in paketet.
 Detta är särskilt bra om vi bara vill använda en enskild funktion från
 ett paket.
 Vi kan då snabbt se i vår kod var paketet används.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

lubridate::ymd("19990101")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
För att ta bort ett paket från en aktuell R-session används 
\family typewriter
detatch()
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

detach("package:pxweb", character.only = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
I R-Studio kan vi studera vilka paket som finns installerade och vilka som
 är inlästa i R under 
\begin_inset Quotes eld
\end_inset

Packages
\begin_inset Quotes erd
\end_inset

.
 Här kan vi också lägga till eller ta bort paket från vår aktiva session.
 Undersök om du har 
\family typewriter
ggplot2
\family default
 installerat och vilken version du har av 
\family typewriter
ggplot2
\family default
.
 Om 
\family typewriter
ggplot2
\family default
 inte är installerat pröva att installera det.
\end_layout

\begin_layout Chapter
Mer om funktioner
\end_layout

\begin_layout Standard
Funktioner är en central del i R.
 Allt som 
\begin_inset Quotes eld
\end_inset

gör
\begin_inset Quotes erd
\end_inset

 något i R är en funktion och allt som 
\begin_inset Quotes eld
\end_inset

är
\begin_inset Quotes erd
\end_inset

 något är ett objekt.
 Av detta följer att varje enskild funktion är ett objekt i sig.
 
\end_layout

\begin_layout Standard
För en mer fördjupad om det som gås igenom här rekommenderas 
\series bold
\color blue

\begin_inset CommandInset href
LatexCommand href
name "kapitlet om funktioner"
target "http://adv-r.had.co.nz/Functions.html"

\end_inset


\series default
\color inherit
 i 
\shape italic
Advanced R programming
\shape default
 av Hadley Wickham.
\end_layout

\begin_layout Section
Delar i en R-funktion 
\end_layout

\begin_layout Standard
Varje funktion består av tre huvudsakliga delar.
 Funktionens argument (eller formals), kropp (body) och lokala miljö (environmen
t).
 Det är dessa tre som tillsammans utgör en funktion.
 
\end_layout

\begin_layout Enumerate
Vi börjar med att skapa följade funktion i R.
 
\begin_inset Formula 
\[
f(x,y)=x^{2}+y^{2}-1
\]

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

f <- function(x,y){
\end_layout

\begin_layout Plain Layout

	fxy <- x^2 + y^2 - 1
\end_layout

\begin_layout Plain Layout

	return(fxy)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Vi kan nu använda oss av funktionen 
\family typewriter
formals()
\family default
 för att plocka ut funktionens argument.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

formals(f)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
På samma sätt kan vi studera funktionens kropp med 
\family typewriter
body()
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

body(f)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Till sist kan vi också undersöka funktionens miljö.
 Detta säger ingeting just nu, men vi kommer strax återkomma till funktioners
 lokala miljöer.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

environment(f)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Primitiva funktioner
\end_layout

\begin_layout Standard
Det finns ett undantag från dessa regler och det gäller primitiva funktioner.
 Dessa funktioner är skrivna direkt i C-kod och anropar C-kod direkt.
 Dessa funktioner har varken 
\family typewriter
environment()
\family default
, 
\family typewriter
body()
\family default
 eller 
\family typewriter
formals()
\family default
.
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

c
\end_layout

\begin_layout Plain Layout

formals(c)
\end_layout

\begin_layout Plain Layout

body(c)
\end_layout

\begin_layout Plain Layout

environment(c)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Krav på funktioner
\end_layout

\begin_layout Standard
Vi börjar med att se vilka delar som är nödvändiga för en funktion i R.
 Vi börjar med följande enkla funktion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

g <- function(a,b){
\end_layout

\begin_layout Plain Layout

	c <- a + b
\end_layout

\begin_layout Plain Layout

	return(c)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Funktioner behöver inte ha ett 
\family typewriter
return()
\family default
-steg.
 Om returnsteget saknas måste det som ska returneras 
\begin_inset Quotes eld
\end_inset

skrivas ut
\begin_inset Quotes erd
\end_inset

.
 Se exemplet nedan:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

g <- function(a,b){
\end_layout

\begin_layout Plain Layout

	c <- a + b
\end_layout

\begin_layout Plain Layout

	c
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Det gör att vi kan förenkla funktionen ytterligare på följande sätt.
 Pröva att funktionen fortfarande fungerar.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

g <- function(a,b){
\end_layout

\begin_layout Plain Layout

	a + b
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Det är också möjligt att uttrycka en funktion på en och samma rad.
 Då behöver vi inte heller 
\family typewriter
{}
\family default
.
 Se exempel nedan:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

g <- function(a,b) a + b
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att använda 
\family typewriter
formals()
\family default
 och 
\family typewriter
body()
\family default
 på funktionen 
\family typewriter
g()
\family default
 ovan.
\end_layout

\begin_layout Section
Defaultvärden och argumentordning
\end_layout

\begin_layout Standard
I vissa fall kan det vara så att vi vill att ett givet värde ska vara det
 värde som används som standardvärde för en särskild funktion.
 Exempelvis funktionen 
\family typewriter
mean()
\family default
 har argumentet 
\family typewriter
rm.na
\family default
 satt till 
\family typewriter
FALSE
\family default
 som standard.
\end_layout

\begin_layout Standard
För att skapa ett standardvärde använder ställer vi in detta i funktionsdefiniti
onen på följande sätt 
\family typewriter
function(a, b=10)
\family default
.
 Vi kan i princip ha vad vi vill som standardvärden.
\end_layout

\begin_layout Enumerate
Nedan är ett exempel på standardvärden i funktioner.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

g <- function(a, b = 10){
\end_layout

\begin_layout Plain Layout

	res <- a + b
\end_layout

\begin_layout Plain Layout

	return(res)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att köra funktionen både genom att ange argumentet 
\family typewriter
b
\family default
 och utan att ange det.
 Upprepa funktionen men sätt standarvärdet för 
\family typewriter
a
\family default
 till 5 och 
\family typewriter
b
\family default
 till 15.
 Pröva att anropa funktionen utan att ange några värden alls.
\end_layout

\begin_layout Enumerate
Pröva att använda funktionen 
\family typewriter
formals()
\family default
 på funktionen 
\family typewriter
g()
\family default
 ovan.
 Framgår defaultvärdet?
\end_layout

\begin_layout Enumerate
Skapa en ny funktion på följande sätt:
\begin_inset Formula 
\[
h(x,y)=x^{y}-y
\]

\end_inset

där 
\begin_inset Formula $y$
\end_inset

 sätts till 1 som standard.
 
\end_layout

\begin_layout Enumerate
När vi anropar en funktion kan vi välja att ange namnet på argumentet eller
 inte.
 Anger vi namnet på argumenten så spelar ordningen ingen roll.
 Anger vi däremot inte argumentens namn utgår R från att argumenten följer
 samma ordning som vi skapade argumenten i (och som vi ser med 
\family typewriter
formals()
\family default
)
\end_layout

\begin_layout Enumerate
Pröva lite olika värden på 
\family typewriter
x
\family default
 och 
\family typewriter
y
\family default
.
 Pröva att använda argumentnamnen och byt ordning på 
\family typewriter
x
\family default
 och 
\family typewriter
y
\family default
 i funktionsanropet (d.v.s 
\family typewriter
h(y=10, x=100)
\family default
 ).
 
\end_layout

\begin_layout Enumerate
Pröva följande kod.
 En funktion kan bara ha ett argument med ett givet argumentnamn.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

k <- function(a, a = 10){
\end_layout

\begin_layout Plain Layout

	res <- a^2
\end_layout

\begin_layout Plain Layout

	return(res)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Funktioner i funktioner
\end_layout

\begin_layout Standard
Ibland kan det vara så att vi vill ge en hel funktion som ett argument till
 en annan funktion.
 Ett exempel på detta är om vi vill integrera en funktion numeriskt.
\end_layout

\begin_layout Enumerate
Vi ska nu pröva att beräkna en integral numeriskt i R.
 Börja med att skapa följande funktion i R och kalla den för 
\family typewriter
f
\family default
.
 
\begin_inset Formula 
\[
f(x)=\frac{1}{3}x^{2}
\]

\end_inset


\end_layout

\begin_layout Enumerate
För att integrera numeriskt i R använder vi funktionen 
\family typewriter
integrate()
\family default
.
 Vi behöver då ange funktionen vi vill integrera genom att ange denna funktion
 som ett argument till 
\family typewriter
integrate()
\family default
.
 Vi behöver också ange från vilka värden vi vill utföra integralen.
 Exempelvis följande integral: 
\begin_inset Formula 
\[
\int_{0}^{3}f(x)dx=\int_{0}^{3}\frac{1}{3}x^{2}dx
\]

\end_inset

kan beräknas på följande sätt i R:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

f <- function(x) (1/3)*x^2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

integrate(f=f, 0, 3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva nu att beräkna följande integral för 
\family typewriter
f
\family default

\begin_inset Formula 
\[
\int_{-3}^{9}f(x)dx
\]

\end_inset


\end_layout

\begin_layout Enumerate
Vi kan också skicka med argument till den funktion vi skickar med.
 Skapa täthetfunktionen för en exponentialfördelad variabel med argumenten
 
\family typewriter
x
\family default
 och 
\family typewriter
lambda
\family default
 och kalla den 
\family typewriter
exp_pdf()
\family default
 i R.
 Täthetsfunktionen ges nedan: 
\begin_inset Formula 
\[
f_{X}(x,\lambda)=\lambda e^{-\lambda x}
\]

\end_inset


\end_layout

\begin_layout Enumerate
För att skicka med både en funktion och argument som ska skickas vidare
 används 
\family typewriter
...

\family default
 i funktionen 
\family typewriter
integrate()
\family default
.
 För att beräkna följande integral 
\begin_inset Formula 
\[
\int_{0}^{1}f_{X}(x,\lambda=1)dx
\]

\end_inset


\begin_inset Newline newline
\end_inset

gör vi på följande sätt:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

exp_pdf <- function(x, lambda) lambda * exp(-lambda * x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

integrate(f=exp_pdf, 0, 1, lambda = 1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ellipsis (
\family typewriter
...
\family default
)
\end_layout

\begin_layout Standard
Ovan var ett exempel på ...
 som kallas ellipsis.
 Ellipsis är ett sätt att kunna skicka ett godtyckligt antal argument (och
 godtyckligt namngivna) till en funktion och sedan skicka vidare dessa till
 en ny funktion.
 På detta sätt behöver inte varje funktion vi konstruerar ta hänsyn till
 alla möjliga funktioner.
\end_layout

\begin_layout Enumerate
Använd hjälpen och titta på dokumentationen till funktionen apply().
 apply() har dels ett argument 
\family typewriter
FUN
\family default
 där vi anger en funktion vi använder och ...
 för att kunna skicka godtyckliga argument till den funktion vi angett under
 
\family typewriter
FUN
\family default
.
\end_layout

\begin_layout Enumerate
Vi ska nu pröva att skapa en funktion på följande sätt.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

apply_my_function_on_x <- function(x, FUN) FUN(x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att skapa en numerisk vektor och prova lite olika funktioner som argument
 
\family typewriter
FUN
\family default
.
 Ex.
 
\family typewriter
mean()
\family default
, median() och kontrollera att det fungerar.
\end_layout

\begin_layout Enumerate
Pröva nu att byta ut ett element i din numeriska vektor till 
\family typewriter
NA
\family default
 och pröva återigen lite funktioner som 
\family typewriter
mean()
\family default
 och 
\family typewriter
median()
\family default
.
 Nu får vi 
\family typewriter
NA
\family default
 som resultat och det finns inget sätt att skicka med 
\family typewriter
na.rm=TRUE
\family default
 till ex.
 
\family typewriter
mean()
\family default
.
 Antingen är 
\family typewriter
na.rm=TRUE
\family default
 eller 
\family typewriter
na.rm=FALSE
\family default
.
 Det går inte att från vår funktion 
\family typewriter
apply_my_function_on_x()
\family default
.
\end_layout

\begin_layout Enumerate
Skapa nu följande funktion där vi använder 
\family typewriter
...

\family default
 .
 Observera att vi behöver ange det både som argument i vår funktion och
 som argument i den funktion vi vill kunna skicka vidare argument till.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

apply_my_function_on_x <- function(x, FUN, ...) FUN(x, ...)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva nu att styra 
\family typewriter
na.rm
\family default
 i 
\family typewriter
mean()
\family default
 direkt från vår 
\family typewriter
apply_my_function_on_x()
\family default
-funktion och kontrollera att resultaten fungerar som de ska.
 
\end_layout

\begin_layout Section
Globala och lokala miljöer i R 
\end_layout

\begin_layout Standard
Alla funktioner i R skapar egna lokala miljöer när funktionerna anropas
 där initialt bara argumenten finns.
 Fördelen med detta är att det inte finns några risker att olika objekt
 skulle krocka om de skulle ha samma namn.
 Ett bra sätt att tänka är att R startar en helt ny R-session varje gång
 en funktion anropas och att koden i funktionen körs i denna miljö.
 Det gör att våra variabler som vi har i den globala miljön inte påverkas
 och att vi behöver inte oroa oss för vad vi använder oss av för variabler
 inuti funktioner.
 
\end_layout

\begin_layout Enumerate
Kör följande kod.
 Vad förväntar du dig att ska hända?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

mitt_x <- function(){
\end_layout

\begin_layout Plain Layout

	x <- 15
\end_layout

\begin_layout Plain Layout

	print("x:")
\end_layout

\begin_layout Plain Layout

	print(x)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

x <- 10
\end_layout

\begin_layout Plain Layout

mitt_x()
\end_layout

\begin_layout Plain Layout

x
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En central del när det gäller funktioner (och objekt) i R är den så kallade
 sökvägen till objekt.
 Det handlar om hur R väljer vilken funktion eller objekt den ska returnera
 om vi anger ett objektsnamn.
\end_layout

\begin_layout Standard
R gör detta baserat på sökvägen till objektsnamnen.
 Med funktionen 
\family typewriter
search()
\family default
 kan vi se hur R söker efter en funktion eller objekt om vi anger ett objektnamn.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

search()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Det är i denna ordning som R kommer söka om vi exempelvis anropar funktionen
 
\family typewriter
mean()
\family default
.
 Först kommer den se om det finns en funktion som heter 
\family typewriter
mean()
\family default
 i den globala miljön.
 Hittar den inte denna funktion där kommer den gå vidare och leta efter
 
\family typewriter
mean()
\family default
 i de olika paketen i den ordning som anges ovan.
 Finns det ingen 
\family typewriter
mean()
\family default
-funktion i något paket kommer den tillslut titta i base-paketet där 
\family typewriter
mean()
\family default
 ligger och anropa funktionen.
\end_layout

\begin_layout Standard
Nu återkommer vi till funktionen environment() som vi prövade tidigare.
 Med denna funktion kan vi se i vilken miljö en funktion har skapats.
 
\end_layout

\begin_layout Standard
Detta sätt att leta reda på funktioner kallas för 
\series bold
lexical scoping
\series default
.
 
\end_layout

\begin_layout Enumerate
Vi ska nu titta på funktionen 
\family typewriter
mean()
\family default
.
 Börja med att studera var denna funktion ligger men 
\family typewriter
environment()
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

environment(mean)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skapa följande funktion och pröva denna kod: 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

mean <- function(x){
\end_layout

\begin_layout Plain Layout

	100
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Den funktion vi brukar använda för att räkna ut medelvärden heter också
 
\family typewriter
mean()
\family default
.
 Vilken funktion är det som används om du anropar funktionen 
\family typewriter
mean
\family default
 nu för en numerisk vektor.
\end_layout

\begin_layout Enumerate
Pröva att se vilken miljö 
\family typewriter
mean()
\family default
 nu ligger i.
\end_layout

\begin_layout Enumerate
Pröva nu att anropa den gamla 
\family typewriter
mean()
\family default
-funktionen med hjälp av 
\family typewriter
::
\family default
 direkt från den namespace den gamla funktionen 
\family typewriter
mean()
\family default
 ligger i.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

base::mean(1:10)
\end_layout

\begin_layout Plain Layout

mean(1:10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Ta nu bort din 
\family typewriter
mean()
\family default
-funktion med 
\family typewriter
rm(mean)
\family default
.
 Pröva följande kod igen.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

base::mean(1:10)
\end_layout

\begin_layout Plain Layout

mean(1:10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Skapa nu följande funktionen nedan.
 Vilken variabel är en så kallad fri variabel?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

f <- function(x){
\end_layout

\begin_layout Plain Layout

	(x + y)^2 - 1
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fria variabler och dynamic lookup
\end_layout

\begin_layout Standard
Är det så att en variabel används i en funktion men inte skapas i funktionen
 är det en så kallad fri variabel.
 I dessa fall kommer R söka efter denna variabel 
\series bold
i den miljö där funktionen skapades.
\end_layout

\begin_layout Standard
R använder också så kallad dynamic lookup.
 Det innebär att R anropar fria variabler när funktionen körs, inte när
 funktionen skapas.
 
\end_layout

\begin_layout Enumerate
Kör denna kod i R: Pröva lite olika värden på 
\family typewriter
fri_variabel
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

fri_variabel <- 10
\end_layout

\begin_layout Plain Layout

ny_fun <- function(){
\end_layout

\begin_layout Plain Layout

  a <- c(1, 3, 5)
\end_layout

\begin_layout Plain Layout

  b <- a + fri_variabel 
\end_layout

\begin_layout Plain Layout

  return(b)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

ny_fun()
\end_layout

\begin_layout Plain Layout

fri_variabel <- 10
\end_layout

\begin_layout Plain Layout

ny_fun()
\end_layout

\begin_layout Plain Layout

rm(fri_variabel)
\end_layout

\begin_layout Plain Layout

ny_fun()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Det vi sett ovan är hur R letar upp en funktion (eller objekt).
 När det gäller fria variabler i funktioner fungerar det på samma sätt.
\end_layout

\begin_layout Itemize
Först försöker R hitta variabeln i den lokala miljön för funktionen.
 
\end_layout

\begin_layout Itemize
Hittar R inte funktionen där letar den vidare i den miljö där funktionen
 skapades.
 
\end_layout

\begin_layout Itemize
Hittar den inte variabeln där fortsätter den upp till dess att den kommer
 till den globala miljön.
\end_layout

\begin_layout Itemize
Finns variabeln inte i den globala miljön söker den vidare i de inlästa
 paketen.
 Finns funktionen inte där så returnerar R ett felmeddelande om att den
 friavariabeln saknas.
 
\end_layout

\begin_layout Enumerate
Skapa koden nedan, vad gör funktionen? Använder den 
\family typewriter
y <- 5
\family default
 eller 
\family typewriter
y <- 10
\family default
?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

y <- 5
\end_layout

\begin_layout Plain Layout

g <- function(x){
\end_layout

\begin_layout Plain Layout

  y <- 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  f <- function(a) a^2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  print(environment(f))
\end_layout

\begin_layout Plain Layout

  output <- f(y)
\end_layout

\begin_layout Plain Layout

  return(output)
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Högnivåfunktioner (
\family typewriter
*apply
\family default
)
\end_layout

\begin_layout Standard
Vi ska nu använda så kallade de så kallade 
\family typewriter
*apply
\family default
-funktionerna i R.
 Dessa funktioner är så kallade högnivåfunktioner som vi använder om vi
 vill applicera en funktion mer generellt.
\end_layout

\begin_layout Standard
Det finns flera olika högnivåfunktioner.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Högnivåfunktion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anropa funktionen 
\family typewriter
FUN
\family default
 för...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
apply()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
varje rad eller kolumn i en matris
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
vapply()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
varje element i en vektor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
tapply()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
varje grupp eller id
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
lapply()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
varje element i en lista
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mapply()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
olika uppsättningar av argument till 
\family typewriter
FUN
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Exempelvis 
\family typewriter
vapply()
\family default
 och 
\family typewriter
lapply()
\family default
 blir på detta sätt ett alternativ till att använda loopar som ibland kan
 vara snabbare.
\end_layout

\begin_layout Enumerate
Vi börjar med funktionen 
\family typewriter
tapply()
\family default
.
 
\family typewriter
tapply()
\family default
 används för att använda en funktion per grupp (över en så kallad 
\begin_inset Quotes eld
\end_inset

Ragged array
\begin_inset Quotes erd
\end_inset

 eller vektorer av olika längd).
 Detta är ofta av intresse i praktiken.
 Vi börjar med att läsa in datsetet 
\family typewriter
ChickWeight
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

data(ChickWeight)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Vi ska nu pröva 
\family typewriter
tapply()
\family default
 som har argumenten 
\family typewriter
X
\family default
, 
\family typewriter
INDEX
\family default
, 
\family typewriter
FUN
\family default
 och 
\family typewriter
simplify
\family default
.
 
\family typewriter
X
\family default
 anger variabeln (eller datasetet) vi vill använda funktionen på, 
\family typewriter
INDEX
\family default
 anger vilken gruppvariabel som ska användas och 
\family typewriter
FUN
\family default
 anger vilken funktion som ska användas per grupp.
 Ett exempel på hur vi kan beräkna den genomsnittliga vikten per kyckling
 ser ut på följande sätt:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

tapply(X=ChickWeight$weight, INDEX=ChickWeight$Chick, FUN=mean)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att på ett liknande sätt beräkna standardavvikelsen för varje kyckling
 samt antalet observationer (längden av vektorn) och kvantilerna med 
\family typewriter
quantile()
\family default
.
\end_layout

\begin_layout Enumerate
Pröva nu att skicka argument till quantile (med 
\family typewriter
...
\family default
) för att räkna ut percentiler för varje kyckling.
 
\end_layout

\begin_layout Enumerate

\family typewriter
*apply
\family default
-funktioner är särskilt smidiga att använda tillsammans med så kallade anonyma
 funktioner (d.v.s.
 funktioner som skapas 
\begin_inset Quotes eld
\end_inset

on the fly
\begin_inset Quotes erd
\end_inset

.
 Pröva koden nedan.
 Vad gör den?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

tapply(X=ChickWeight$weight, INDEX=ChickWeight$Chick, FUN=function(x) sum(x)^2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pröva att på liknande sätt skapa en funktion som räknar ut skillnaden mellan
 det första värdet och det sista värdet för varje kyckling med en anonym
 funktion.
\end_layout

\begin_layout Enumerate
Pröva nu att göra om uppgiften ovan, men i 
\family typewriter
tapply()
\family default
 ange 
\family typewriter
simplify = TRUE
\family default
.
 Vad är skillnaden?
\end_layout

\begin_layout Enumerate
Vi ska nu studera 
\family typewriter
lapply()
\family default
.
 
\family typewriter
lapply()
\family default
 använder en funktion 
\family typewriter
FUN
\family default
 på varje element i en lista 
\family typewriter
X
\family default
.
 Kör koden nedan: Vad har du skapat för lista?
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

myList <- split(x = ChickWeight, f = ChickWeight$Diet)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Räkna ut medelvärde, varians och percentiler för varje weight i varje element
 i 
\family typewriter
myList
\family default
 med 
\family typewriter
lapply()
\family default
.
\end_layout

\begin_layout Enumerate
Skapa nu en funktion som kan ta ett dataset för en kyckling och räknar ut
 skillnaden i vikt mellan tidpunkt 0 och tidpunkt 10, om värden saknas för
 tidpunkt 0 eller 10 ska 
\family typewriter
NA
\family default
 returneras.
 Använd denna funktion tillsammans med 
\family typewriter
lapply()
\family default
 för att beräkna den skillnaden mellan tidpunkt 0 och 10 för alla kycklingar.
\end_layout

\begin_layout Chapter
Dokumentation av funktioner - 
\family typewriter
ROxygen
\end_layout

\begin_layout Standard
När vi arbetar med att utveckla funktioner finns det ofta ett behov av att
 dokumentera de funktioner vi skapar.
 Vi dokumenterar inte bara funktioner för andras skull utan också för vår
 egen skull.
 Det kan många gånger vara nog så svårt att komma ihåg hur vi tänkte för
 fyra månader när vi skrev en funktion.
 
\end_layout

\begin_layout Standard
Det är viktigt att vi dokumenterar en funktion tillsammans med funktionen.
 Annars är risken stor att vi kanske ändrar en funktion och glömmer sedan
 bort att ändra i dokumentationen när vi ändrar i vår funktion.
\end_layout

\begin_layout Standard
Det standardsätt att dokumentera funktioner i R kallas R-documentation och
 utgör den dokumentation som vi får upp med 
\family typewriter
help()
\family default
 eller 
\family typewriter
?
\family default
 för enskilda funktioner.
 Dessa dokument är skrivna i LaTeX och är separata dokument som är kopplade
 till funktioner i R-paket.
 Vi kan således bara använda detta för funktioner i paket.
\end_layout

\begin_layout Standard
Vill vi dokumentera våra funktioner utan att skapa egna paket använder vi
 ROxygen.
 Det är ett format för att dokumentera funktioner direkt i R.
 Har vi väl dokumenterat våra funktioner med Roxygen kan vi generera R documenta
tion-filer automatiskt om vi väljer att lägga in funktionen i ett paket.
 
\end_layout

\begin_layout Standard
Ett exempel på hur roxygen-dokumentation framgår nedan:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

#' @description 
\end_layout

\begin_layout Plain Layout

#' En funktion som kvadrerar argumenten i x och y och summerar dem.
 
\end_layout

\begin_layout Plain Layout

#'
\end_layout

\begin_layout Plain Layout

#' @param x
\end_layout

\begin_layout Plain Layout

#' Den numeriska variabel x som ska kvadreras
\end_layout

\begin_layout Plain Layout

#' @param y
\end_layout

\begin_layout Plain Layout

#' Den numeriska variabel y som ska kvadreras
\end_layout

\begin_layout Plain Layout

#'
\end_layout

\begin_layout Plain Layout

#' @return
\end_layout

\begin_layout Plain Layout

#' Funktionen returnerar en numerisk vektor
\end_layout

\begin_layout Plain Layout

#'
\end_layout

\begin_layout Plain Layout

f <- function(x, y) x^2 + y^2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Observera att roxygendokumentation inleds med 
\family typewriter
#'
\family default
.
\end_layout

\begin_layout Standard
I dokumentationen ovan dokumenteras funktionens argument, vad funktionen
 gör och vad funktionen returnerar för värde.
 
\end_layout

\begin_layout Standard
Följande delar i dokumentationen är vanliga att använda.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
roxygendel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåll
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@title
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anger titel för dokumentet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
En beskrivning vad funktionen gör
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@details
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Detaljer om funktionen, ex.
 speciella argument
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@param
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument till funktionen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@return
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vad funktionen returnerar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@references
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eventuella referenser av intresse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@seealso
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Andra funktioner som kan vara aktuella
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@examples
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exempel på hur funktionen kan användas
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
För ett exempel på dokumentation i Roxygen och hur det ser ut i R är funktionen
 
\family typewriter
interactive_pxweb()
\family default
 i paketet 
\family typewriter
pxweb
\family default
.
 
\end_layout

\begin_layout Standard
Funktionen med tillhörande dokumentation finns 
\series bold
\color blue

\begin_inset CommandInset href
LatexCommand href
name "[här]"
target "https://github.com/rOpenGov/pxweb/blob/master/R/interactive_pxweb.R"

\end_inset


\series default
\color inherit
.
 Nedan finns kod för att studera hur dokumentationen ser ut i ett R-paket.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

install.packages("pxweb") # Om paketet inte installerats tidigare
\end_layout

\begin_layout Plain Layout

library(pxweb)
\end_layout

\begin_layout Plain Layout

?interactive_pxweb
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Inlämningsuppgifter
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Inluppg.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

# Set you (local) path
\end_layout

\begin_layout Plain Layout

solution_path <- "/Users/manma97/Dropbox/Doktorandstudier/Undervisning/Statistis
k programmering i R/KursRprgmTeacher/Labs/exercise_solutions/"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

solution_files <- dir(solution_path)
\end_layout

\begin_layout Plain Layout

for(sol_file in solution_files) source(file = paste0(solution_path, sol_file),
 echo = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Inlämningsuppgifter
\end_layout

\begin_layout Standard
För att använda 
\family typewriter
markmyassignment
\family default
 i denna laboration ange:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

library(markmyassignment)
\end_layout

\begin_layout Plain Layout

lab_path <-
\end_layout

\begin_layout Plain Layout

"https://raw.githubusercontent.com/MansMeg/KursRprgm/master/Labs/Tests/d4.yml"
\end_layout

\begin_layout Plain Layout

set_assignment(lab_path)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section

\family typewriter
my_gauss_elimination()
\end_layout

\begin_layout Standard
Vi ska i denna uppgift skapa en funktion som kan lösa ett linjärt ekvationsystem
 i R med tre variabler och tre ekvationer.
 Mer information om linjära ekvationssystem finns 
\begin_inset CommandInset href
LatexCommand href
name "[här]"
target "http://sv.wikipedia.org/wiki/Linj%C3%A4rt_ekvationssystem"

\end_inset

 och om gausselimination finns det mer information 
\begin_inset CommandInset href
LatexCommand href
name "[här]"
target "http://sv.wikipedia.org/wiki/Gausselimination"

\end_inset

.
\end_layout

\begin_layout Standard
Funktionen ska kunna ta en 
\begin_inset Formula $3\times3$
\end_inset

 matris 
\begin_inset Formula $A$
\end_inset

 och en vektor 
\begin_inset Formula $\mathbf{b}$
\end_inset

 av längd 3.
 Därefter ska funktionen lösa ekvationssystemet 
\begin_inset Formula $A\mathbf{x}=\mathbf{b}$
\end_inset

 med gausselimination.
 Tänk på att det är troligt att du får avrundningsfel i denna uppgift.
 Resultatet behöver bara vara rätt till 10:e decimalen.
\end_layout

\begin_layout Standard

\series bold
Obs!
\series default
 I R finns redan en funktion för som löser ekvationssystem - 
\family typewriter
solve()
\family default
.
 Denna funktion är inte tillåten att använda, men kan användas för att pröva
 sig fram om funktionen ger rätt svar.
 
\end_layout

\begin_layout Standard

\series bold
Tips!
\series default
 Ett tips om man är osäker hur man väljer ut rader och kolumner är att titta
 i laboration D2 där matrisindexering behandlas.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE,echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

A <- diag(3) 
\end_layout

\begin_layout Plain Layout

b <- 1:3 
\end_layout

\begin_layout Plain Layout

my_gauss_elimination(A,b)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

A <- matrix(c(8,2,3,5,7,1,4,9,6), nrow=3) 
\end_layout

\begin_layout Plain Layout

b <- c(14,23,8)
\end_layout

\begin_layout Plain Layout

my_gauss_elimination(A,b)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
* Tävlingsuppgift:
\family typewriter
 my_gauss_elimination()
\end_layout

\begin_layout Standard
För de studenter som är intresserade finns i denna laboration en tävlingsuppgift.
 Tävlingsuppgiften består dels i att göra om 
\family typewriter
my_gauss_elimination()
\family default
 så den kan ta en godtyckligt stort ekvationssystem (
\series bold
A
\series default
 och 
\series bold
b
\series default
) och dels att försöka optimera denna funktion så den blir så snabb som
 möjligt.
\end_layout

\begin_layout Standard
Om det är flera funktioner som är korrekta (d.v.s.
 ger rätt svar) koras vinnaren baserat på vilken funktion som är snabbast.
\end_layout

\begin_layout Standard
Mejla in ditt förslag till
\series bold
\color blue
 
\begin_inset CommandInset href
LatexCommand href
name " mans.magnusson@liu.se"
target " mans.magnusson@liu.se"

\end_inset


\series default
\color inherit
 innan deadline.
 
\end_layout

\begin_layout Section
Svenska personnummer
\end_layout

\begin_layout Standard
I Sverige har samtliga medborgare personnummer som de behåller livet ut
 och som används för identifikation.
 Personnummret består av tre delar, födelsedatum, födelsenummer och en kontrolls
iffra.
 Som standard anges personnummer på följande sätt 
\family typewriter
ÅÅÅÅMMDDNNNK
\family default
 där 
\family typewriter
ÅÅÅÅ
\family default
 är födelseåret, 
\family typewriter
MM
\family default
 födelsemånaden, 
\family typewriter
DD
\family default
 födelsedagen, 
\family typewriter
NNN
\family default
 födelsenumret och 
\family typewriter
K
\family default
 kontrollsiffran.
\end_layout

\begin_layout Standard
Kontrollsiffran beräknas baserat på de övriga siffrorna i personnummret
 vilket gör att det är möjligt att kontrollera om ett personnummer är korrekt
 eller inte.
 Det är också möjligt att utifrån ett personnummer beräkna ålder och kön
 (samt för vissa även födelseort, men det spelar ingen roll i denna uppgift).
 
\end_layout

\begin_layout Standard
Detaljerna om för hur kön och kontrollsiffran beräknas finns i Skatteverkets
 broschyr SKV 704 
\begin_inset CommandInset href
LatexCommand href
name "[PDF]"
target "http://www.skatteverket.se/download/18.1e6d5f87115319ffba380001857/1285595720207/70408.pdf"

\end_inset

.
 Läs igenom denna broschyr innan du gör uppgiften nedan.
\end_layout

\begin_layout Standard
Exempel på personnummer som kan användas för att testa dina funktioner finns
 dels i broschyren från Skatteverket och dels på Wikipedia (sökord: “Personnumme
r i Sverige”).
 Du kan självklart även testa med ditt eget personnummer om du vill.
\end_layout

\begin_layout Standard
Syftet med denna uppgifter att skapa flera mindre funktioner och sedan kombinera
 ihop dessa funktioner till en större mer komplex funktion.
\end_layout

\begin_layout Standard
Det vi vill ha i slutändan är en funktion som tar en vektor med personnummer
 på olika format.
 Funktionen ska sedan returnera ett dataset med den information som finns
 i personnummret (med undantag för födelselän).
 Vi tar det dock i flera steg, med flera olika funktioner som utför olika
 steg.
 De stegen vi kommer göra är: 
\end_layout

\begin_layout Enumerate
Skapa en funktion för att konvertera personnummer till ett standardformat
 som vi kan arbeta med vidare.
\end_layout

\begin_layout Enumerate
Skapa en funktion för att kontrollera kontrollsiffran i ett personnummer.
\end_layout

\begin_layout Enumerate
Skapa en funktion för att kontrollera om personnummret är ett samordningsnummer.
\end_layout

\begin_layout Enumerate
Skapa en funktion för att ta fram uppgift om kön från ett personnummer.
\end_layout

\begin_layout Enumerate
Kontrollera/skapa ett datum att beräkna ålder från.
\end_layout

\begin_layout Enumerate
Skapa en funktion för att ta fram uppgifter om ålder från ett personnummer
 och ett givet datum.
\end_layout

\begin_layout Enumerate
Skapa en funktion som sätter samman funktionerna ovan till en funktion,
 som tar en vektor av personnummer som input och returnerar ett dataset
 med personnummer och övrig information.
\end_layout

\begin_layout Standard
Följande funktioner kommer vara mycket användbara i denna uppgift: 
\family typewriter
paste()
\family default
, 
\family typewriter
substr()
\family default
 och 
\family typewriter
Sys.Date()
\family default
.
 Kolla upp dessa funktioner innan du sätter igång.
\end_layout

\begin_layout Subsection
Uppgift 1: 
\family typewriter
pnr_format()
\end_layout

\begin_layout Standard
Personnummer förekommer i många olika format i vanliga dataanalyser.
 De format funktionen ska kunna hantera är 
\family typewriter
ÅÅMMDD-NNNK
\family default
, 
\family typewriter
ÅÅMMDDNNNK
\family default
 och 
\family typewriter
ÅÅÅÅMMDDNNNK
\family default
.
 Vi hoppar över personnummer på formen 
\family typewriter
ÅÅMMDD+NNNK
\family default
.
 Detta innebär att vi antar att alla personnummer är yngre än 100 år gamla.
 I R kan dessutom personnummer förekomma både som numeriska variabler faktorvari
abler och som textvariabler.
 Vår funktion ska klara samtliga dessa fall.
\end_layout

\begin_layout Standard
Funktionen ska heta 
\family typewriter
pnr_format()
\family default
 med argumentet 
\family typewriter
pnr
\family default
 och ska kunna ta ett personnummer på ett godtyckligt format och returnera
 personnummret som ett textelement med följande format: 
\family typewriter
ÅÅÅÅMMDDNNNK
\end_layout

\begin_layout Standard
Ett förslag på de steg som kan ingå är:
\end_layout

\begin_layout Enumerate
Konvertera numeriska och faktorvariabler till text.
\end_layout

\begin_layout Enumerate
Använd en villkorssats för att hantera de tre olika formaten ovan [
\series bold
Tips!
\series default
 
\family typewriter
nchar()
\family default
]
\end_layout

\begin_layout Standard
Här är textexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- "640823-3234" 
\end_layout

\begin_layout Plain Layout

pnr_format(pnr) 
\end_layout

\begin_layout Plain Layout

pnr <- 1311310324
\end_layout

\begin_layout Plain Layout

pnr_format(pnr) 
\end_layout

\begin_layout Plain Layout

pnr <- "198112189876" 
\end_layout

\begin_layout Plain Layout

pnr_format(pnr) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 2: 
\family typewriter
pnr_ctrl()
\end_layout

\begin_layout Standard
Nästa steg i funktionen är att kontrollera om ett personnummer är korrekt
 eller inte.
 För att beräkna en kontrollsiffra används den så kallade Luhn-algoritmen,
 mer information finns 
\series bold
\color blue

\begin_inset CommandInset href
LatexCommand href
name "[här]"
target "http://sv.wikipedia.org/wiki/Luhn-algoritmen"

\end_inset


\series default
\color inherit
.
 Vi ska skapa en funktion som använder Luhn-algoritmen för att testa om
 ett personnummer är korrekt eller inte.
 Fördelen nu är att vi vet exakt på vilket format personnummren kommer att
 vara eftersom vi kommer använda funktionen 
\family typewriter
pnr_format()
\family default
 innan vi anropar 
\family typewriter
pnr_ctrl()
\family default
.
 
\end_layout

\begin_layout Standard
Funktionen ska ta argumentet 
\family typewriter
pnr
\family default
 och returnera 
\family typewriter
TRUE
\family default
 eller 
\family typewriter
FALSE
\family default
 beroende på om personnummret är korrekt eller inte.
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Dela upp personnummret så respektive siffra blir ett eget element.
 [
\series bold
Tips!
\series default
 
\family typewriter
strsplit()
\family default
 och 
\family typewriter
unlist()
\family default
]
\end_layout

\begin_layout Enumerate
Konvertera de uppdelade siffrorna till ett numeriskt format.
\end_layout

\begin_layout Enumerate
Den vektor av de enskilda siffrorna i personnummret kan nu användas i Luhn
 - algoritmen.
 Det enklaste sättet är att multiplicera personnummrets vektor med en beräknings
vektor av 0:or 1:or och 2:or på det sätt som beräkningen specificeras av
 Luhn-algoritmen.
 
\begin_inset Newline newline
\end_inset


\series bold
Obs!
\series default
 Skatteverkets beräkning görs inte på hela personnummret som returnerades
 av 
\family typewriter
pnrFormat()
\family default
, de delar som inte ska räknas kan sättas till 0 i beräkningsvektorn.
\end_layout

\begin_layout Enumerate
Nästa steg är att summera alla värden i vektorn ovan.
 Tänk på att tal större än 9 ska räknas som summan av tiotalssiffran och
 entalssiffran.
 [
\series bold
Tips!
\series default
 
\family typewriter
%%
\family default
 och 
\family typewriter
%/%
\family default
]
\end_layout

\begin_layout Enumerate
Summera värdena på vektorn som beräknades i 4 ovan.
 Plocka ut entalssiffran och dra denna entalssiffra från 10.
 Du har nu räknat ut kontrollsiffran.
 Puh!
\end_layout

\begin_layout Enumerate
Testa om den uträknade kontrollsiffran är samma som kontrollsiffran i personnumm
ret.
\end_layout

\begin_layout Standard
Här är ett testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- "196408233234" 
\end_layout

\begin_layout Plain Layout

pnr_ctrl(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "190101010101" 
\end_layout

\begin_layout Plain Layout

pnr_ctrl(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "198112189876" 
\end_layout

\begin_layout Plain Layout

pnr_ctrl(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "190303030303" 
\end_layout

\begin_layout Plain Layout

pnr_ctrl(pnr)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 3: 
\family typewriter
pnr_sex()
\end_layout

\begin_layout Standard
I denna uppgift ska vi från ett personnummer räkna ut det juridiska könet.
 Som framgår i skattebroschyren ska detta räknas ut genom att undersöka
 om den näst sista siffran i personnummret är jämt (kvinna) eller udda (man).
 Detta är vad som definierar en persons juridiska kön.
 
\end_layout

\begin_layout Standard
Skapa nu en funktion du kallar 
\family typewriter
pnr_sex()
\family default
 med argumentet 
\family typewriter
pnr
\family default
.
 Denna funktion ska ta ett personnummer och returnera en persons kön som
 ett textelement, 
\family typewriter
M
\family default
 för man och 
\family typewriter
K
\family default
 för kvinna.
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Plocka ut den näst sista siffran i personnumret.
\end_layout

\begin_layout Enumerate
Konvertera denna siffra till numeriskt format och testa om siffran är jämn
 (returnera 
\family typewriter
K
\family default
) eller udda (returnera 
\family typewriter
M
\family default
)
\end_layout

\begin_layout Standard
Här är testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- "196408233234" 
\end_layout

\begin_layout Plain Layout

pnr_sex(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "190202020202" 
\end_layout

\begin_layout Plain Layout

pnr_sex(pnr)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 4: 
\family typewriter
pnr_samordn()
\end_layout

\begin_layout Standard
Vissa personer som inte är svenska medborgare kan få ett svenskt samordningsnumm
er som fungerar på samma sätt som personnummer.
 Då får man ett så kallad samordningsnummer.
 Den enda skillnaden är att att talet 60 har lagts till personnummrets födelseda
tum (d.v.s.
 
\family typewriter
DD
\family default
 i 
\family typewriter
ÅÅÅÅMMDD
\family default
).
 
\end_layout

\begin_layout Standard
Exempelvis en person som är född 19640823 får följande första siffror i
 personnumret: 19640883.
\end_layout

\begin_layout Standard
Skapa en funktion du kallar 
\family typewriter
pnr_samordn()
\family default
 med argumentet 
\family typewriter
pnr
\family default
 som tar ett personnummer på formatet genererat av funktionen 
\family typewriter
pnr_format()
\family default
 och returnerar 
\family typewriter
TRUE
\family default
 om det är ett samordningsnummer och 
\family typewriter
FALSE
\family default
 annars.
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Plocka ut födelsedatumet ur personnummret.
\end_layout

\begin_layout Enumerate
Konvertera datumet till ett numeriskt värde och pröva om detta värde är
 större än 60.
\end_layout

\begin_layout Standard
Här är testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- "196408233234" 
\end_layout

\begin_layout Plain Layout

pnr_samordn(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "198112789876" 
\end_layout

\begin_layout Plain Layout

pnr_samordn(pnr)
\end_layout

\begin_layout Plain Layout

pnr <- "198112189876" 
\end_layout

\begin_layout Plain Layout

pnr_samordn(pnr)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 5: 
\family typewriter
pnr_date()
\end_layout

\begin_layout Standard
Vi ska i denna funktion skapa ett datum för att senare beräkna åldern för
 olika individer.
 Skapa en funktion du kallar 
\family typewriter
pnr_date()
\family default
 som tar argumentet 
\family typewriter
pnr
\family default
 och 
\family typewriter
date
\family default
.
 Argumentet date ska ha följande textformat: 
\family typewriter
ÅÅÅÅ-MM-DD
\family default
.
 Om datumet inte är på detta format ska funktionen stoppas och returnera
 följande felmeddelande:
\end_layout

\begin_layout Quote

\family typewriter
Incorrect date format: Correct format should be YYYY-MM-DD.
\end_layout

\begin_layout Standard
Om inget datum anges av användaren ska den 31 december under föregående
 år returneras som datum.
 
\end_layout

\begin_layout Standard
Observera att senare i kursen kommer vi lära oss paketet 
\family typewriter
lubridate
\family default
 som är betydligt bättre och enklare för att hantera och kontrollera datum
 och tid.
 
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Ange ett defaultvärde för argumentet date som inte är aktuellt, ex.
 
\family typewriter
NA
\family default
.
\end_layout

\begin_layout Enumerate
Om date har defaultvärdet, sätt datumvärdet den 31 december föregående år.
 [
\series bold
Tips!
\series default
 
\family typewriter
is.na()
\family default
, 
\family typewriter
Sys.Date()
\family default
 och 
\family typewriter
paste()
\family default
] 
\end_layout

\begin_layout Enumerate
Testa om datumformatet är korrekt.
 Gör följande kontroller [
\series bold
Tips!
\series default
 
\family typewriter
all()
\family default
]:
\end_layout

\begin_deeper
\begin_layout Enumerate
Är 
\family typewriter
ÅÅÅÅ
\family default
, 
\family typewriter
MM
\family default
 och 
\family typewriter
DD
\family default
 siffror.
 Detta kan kontrolleras genom att konvertera till numeriskt värde.
 Är det då inte siffror blir värdet 
\family typewriter
NA
\family default
.
 [
\series bold
Tips!
\series default
 
\family typewriter
is.na()
\family default
]
\end_layout

\begin_layout Enumerate
Är 
\family typewriter
MM
\family default
 större än 0 och mindre än 13.
\end_layout

\begin_layout Enumerate
Är 
\family typewriter
DD
\family default
 större än 0 och mindre än 32.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Om datumformatet är är inkorrekt stoppa funktionen och returnera felmeddelandet
 ovan.
\end_layout

\begin_layout Enumerate
Annars, returnera datumet på korrekt format.
\end_layout

\begin_layout Standard
Här är testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr_date("2010-10-10")
\end_layout

\begin_layout Plain Layout

pnr_date()
\end_layout

\begin_layout Plain Layout

pnr_date("Hejbaberiba")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 6: 
\family typewriter
pnr_age()
\end_layout

\begin_layout Standard
Sist ska vi baserat på dels ett personnummer och dels ett datum beräkna
 åldern för personen vid detta datum.
 Skapa en funktion du kallar 
\family typewriter
pnr_age()
\family default
 tar argumentet 
\family typewriter
pnr
\family default
 och argumentet 
\family typewriter
date
\family default
.
 Argumentet date ska ha följande textformat: 
\family typewriter
ÅÅÅÅ-MM-DD
\family default
.
 Du kan utgå från att formatet är på detta sätt då 
\family typewriter
pnrDate()
\family default
 kommer anropas innan denna funktion.
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Räkna ut skillnaden i hela år mellan datumets årtal personnummrets årtal.
 D.v.s hur gammal personen är den 31 december.
\begin_inset Newline newline
\end_inset


\series bold
Tips!
\series default
 
\family typewriter
as.Date()
\family default
 och 
\family typewriter
as.character()
\family default
 och 
\family typewriter
as.numeric()
\family default
.
\end_layout

\begin_layout Enumerate
Pröva om månad och dag är större (senare) för 
\family typewriter
pnr
\family default
 än för 
\family typewriter
date
\family default
.
 Om så är fallet dra av ett år från årtalsberäkningen ovan (personen har
 ännu inte fyllt år) och returnera åldern vid det givna datumet.
\end_layout

\begin_layout Standard
Här är testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- "196408233234" 
\end_layout

\begin_layout Plain Layout

pnr_age(pnr, date = "2010-10-10")
\end_layout

\begin_layout Plain Layout

pnr <- "198112189876" 
\end_layout

\begin_layout Plain Layout

pnr_age(pnr, date = "2014-12-31")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Uppgift 7: 
\family typewriter
pnr_info()
\end_layout

\begin_layout Standard
Nu har vi skapat ett antal funktioner för att beräkna olika delar av personnummr
et.
 Funktionen ska heta 
\family typewriter
pnr_info()
\family default
 och ta argumentet 
\family typewriter
pnr
\family default
 samt 
\family typewriter
...

\family default
 .
 Nu ska vi sätta ihop dessa funktioner till en enda funktion som baserat
 på en vektor av personnummer returnerar en 
\family typewriter
data.frame
\family default
 följande variabler:
\end_layout

\begin_layout Enumerate

\family typewriter
pnr
\family default
: personnummret i textformat, 
\end_layout

\begin_layout Enumerate

\family typewriter
correct
\family default
: information om personnummret är korrekt,
\end_layout

\begin_layout Enumerate

\family typewriter
samordn
\family default
: om personnummret är ett samordningsnummer 
\end_layout

\begin_layout Enumerate

\family typewriter
sex
\family default
: kön och 
\end_layout

\begin_layout Enumerate

\family typewriter
age
\family default
: ålder i år 
\end_layout

\begin_layout Standard
Det ska också vara möjligt att skicka vidare datum till funktionen 
\family typewriter
pnr_date()
\family default
, men om inget skickas med ska defaultvärdet i 
\family typewriter
pnr_date()
\family default
 användas.
 
\end_layout

\begin_layout Standard
Funktionen ska dessutom generera följande meddelande med 
\family typewriter
message()
\family default
:
\end_layout

\begin_layout Quote

\family typewriter
The age has been calculated at [DATUM].
\end_layout

\begin_layout Standard
Ett förslag på hur funktionen kan implementeras är följande:
\end_layout

\begin_layout Enumerate
Kontrollera/skapa ett korrekt datum för att beräkna ålder med 
\family typewriter
pnr_date()
\family default
.
\end_layout

\begin_layout Enumerate
Formatera om alla personnummer i inputvektorn till standardformatet med
 
\family typewriter
pnr_format()
\family default
.
\end_layout

\begin_layout Enumerate
Räkna ut vilka personnummer som är korrekta personnummer med 
\family typewriter
pnr_ctrl()
\family default
.
\end_layout

\begin_layout Enumerate
Använd 
\family typewriter
pnr_samordn()
\family default
 för att skapa en vektor över vilka personnummer som är samordningsnummer.
\end_layout

\begin_layout Enumerate
Använd 
\family typewriter
pnr_sex()
\family default
 för att räkna ut könet för respektive personnummer.
\end_layout

\begin_layout Enumerate
Dra av 6 från första siffran i födelsedatumet för de personnummer som är
 samordningsnummer.
 Du kan antingen göra detta direkt i 
\family typewriter
pnr_info()
\family default
 eller skapa en till egen funktion som gör just detta.
 Syftet med detta är att inte samordningsnummer ska ställa till problem
 när vi räknar ut åldern med 
\family typewriter
pnr_age()
\family default
.
\end_layout

\begin_layout Enumerate
Använd 
\family typewriter
pnr_age()
\family default
 för att beräkna åldern för respektive personnummer.
\end_layout

\begin_layout Enumerate
Skriv ut meddelandet ovan med 
\family typewriter
message()
\family default
.
\end_layout

\begin_layout Enumerate
Sätt samman dessa resultat till den 
\family typewriter
data.frame
\family default
 som ska returneras.
\end_layout

\begin_layout Standard
Här är testexempel på hur funktionen ska fungera:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=TRUE, echo=TRUE>>=
\end_layout

\begin_layout Plain Layout

pnr <- c("196408233234", "640883-3234","198112189876")
\end_layout

\begin_layout Plain Layout

pnr_info(pnr) 
\end_layout

\begin_layout Plain Layout

pnr_info(pnr, date = "2000-06-01") 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
